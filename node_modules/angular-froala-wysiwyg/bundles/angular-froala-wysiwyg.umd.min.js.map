{"version":3,"sources":["../../projects/library/src/editor/editor.directive.ts","../../projects/library/src/editor/editor.module.ts","../../projects/library/src/view/view.directive.ts","../../projects/library/src/view/view.module.ts","../../projects/library/src/fe-root.module.ts"],"names":["FroalaEditorDirective","el","zone","this","_opts","immediateAngularModelUpdate","angularIgnoreAttrs","SPECIAL_TAGS","INNER_HTML_ATTR","_hasSpecialTag","_editorInitialized","_oldModel","onChange","_","onTouched","froalaModelChange","EventEmitter","froalaInit","element","nativeElement","indexOf","tagName","toLowerCase","_element","prototype","writeValue","content","updateEditor","registerOnChange","fn","registerOnTouched","Object","defineProperty","opts","clone","assign","item","result","me","Number","String","Boolean","forEach","type","toString","call","child","index","array","nodeType","cloneNode","Date","i","JSON","stringify","_model","setContent","_editor","html","set","innerHTML","updateModel","_this","run","modelContent","attributeNodes","attributes","attrs","length","attrName","name","value","returnedHtml","get","emit","registerEvent","eventName","callback","events","initListeners","self","on","setTimeout","createEditor","runOutsideAngular","initialized","existingInitCallback","overridden","FroalaEditor","setHtml","undo","reset","saveStep","firstTime","tags","attr","hasOwnProperty","setAttribute","destroyEditor","destroy","getEditor","generateManualController","controls","initialize","bind","ngAfterViewInit","observers","ngOnDestroy","setDisabledState","isDisabled","Directive","args","selector","exportAs","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","NgZone","Input","Output","FroalaEditorModule","forRoot","ngModule","NgModule","declarations","exports","FroalaViewDirective","renderer","addClass","Renderer2","FroalaViewModule","imports"],"mappings":"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","sourcesContent":["import { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\nimport { Directive, ElementRef, EventEmitter, forwardRef, Input, NgZone, Output } from '@angular/core';\r\n\r\nimport FroalaEditor from 'froala-editor';\r\n\r\n@Directive({\r\n  selector: '[froalaEditor]',\r\n  exportAs: 'froalaEditor',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FroalaEditorDirective),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FroalaEditorDirective implements ControlValueAccessor {\r\n\r\n  // editor options\r\n  private _opts: any = {\r\n    immediateAngularModelUpdate: false,\r\n    angularIgnoreAttrs: null\r\n  };\r\n\r\n  private _element: any;\r\n\r\n  private SPECIAL_TAGS: string[] = ['img', 'button', 'input', 'a'];\r\n  private INNER_HTML_ATTR: string = 'innerHTML';\r\n  private _hasSpecialTag: boolean = false;\r\n\r\n  // editor element\r\n  private _editor: any;\r\n\r\n  // initial editor content\r\n  private _model: string;\r\n\r\n  private _editorInitialized: boolean = false;\r\n\r\n  private _oldModel: string = null;\r\n\r\n  constructor(el: ElementRef, private zone: NgZone) {\r\n\r\n    let element: any = el.nativeElement;\r\n\r\n    // check if the element is a special tag\r\n    if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) != -1) {\r\n      this._hasSpecialTag = true;\r\n    }\r\n    this._element = element;\r\n\r\n    this.zone = zone;\r\n  }\r\n\r\n  // Begin ControlValueAccesor methods.\r\n  onChange = (_) => {\r\n  };\r\n  onTouched = () => {\r\n  };\r\n\r\n  // Form model content changed.\r\n  writeValue(content: any): void {\r\n    this.updateEditor(content);\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  // End ControlValueAccesor methods.\r\n\r\n  // froalaEditor directive as input: store the editor options\r\n  @Input() set froalaEditor(opts: any) {\r\n    this._opts = this.clone(  opts || this._opts);\r\n    this._opts =  {...this._opts};\r\n  }\r\n\r\n   // TODO: replace clone method with better possible alternate \r\n  private clone(item) {\r\n  \tconst me = this;  \r\n      if (!item) { return item; } // null, undefined values check\r\n\r\n      let types = [ Number, String, Boolean ], \r\n          result;\r\n\r\n      // normalizing primitives if someone did new String('aaa'), or new Number('444');\r\n      types.forEach(function(type) {\r\n          if (item instanceof type) {\r\n              result = type( item );\r\n          }\r\n      });\r\n\r\n      if (typeof result == \"undefined\") {\r\n          if (Object.prototype.toString.call( item ) === \"[object Array]\") {\r\n              result = [];\r\n              item.forEach(function(child, index, array) { \r\n                  result[index] = me.clone( child );\r\n              });\r\n          } else if (typeof item == \"object\") {\r\n              // testing that this is DOM\r\n              if (item.nodeType && typeof item.cloneNode == \"function\") {\r\n                  result = item.cloneNode( true );    \r\n              } else if (!item.prototype) { // check that this is a literal\r\n                  if (item instanceof Date) {\r\n                      result = new Date(item);\r\n                  } else {\r\n                      // it is an object literal\r\n                      result = {};\r\n                      for (var i in item) {\r\n                          result[i] = me.clone( item[i] );\r\n                      }\r\n                  }\r\n              } else {\r\n                  if (false && item.constructor) {\r\n                      result = new item.constructor();\r\n                  } else {\r\n                      result = item;\r\n                  }\r\n              }\r\n          } else {\r\n              result = item;\r\n          }\r\n      }\r\n      return result;\r\n  }\r\n  // froalaModel directive as input: store initial editor content\r\n  @Input() set froalaModel(content: any) {\r\n    this.updateEditor(content);\r\n  }\r\n\r\n  // Update editor with model contents.\r\n  private updateEditor(content: any) {\r\n    if (JSON.stringify(this._oldModel) == JSON.stringify(content)) {\r\n      return;\r\n    }\r\n\r\n    if (!this._hasSpecialTag) {\r\n      this._oldModel = content;\r\n    } else {\r\n      this._model = content;\r\n    }\r\n\r\n    if (this._editorInitialized) {\r\n      if (!this._hasSpecialTag) {\r\n        this._editor.html.set(content);\r\n      } else {\r\n        this.setContent();\r\n      }\r\n    } else {\r\n      if (!this._hasSpecialTag) {\r\n        this._element.innerHTML = content || '';\r\n      } else {\r\n        this.setContent();\r\n      }\r\n    }\r\n  }\r\n\r\n  // froalaModel directive as output: update model if editor contentChanged\r\n  @Output() froalaModelChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  // froalaInit directive as output: send manual editor initialization\r\n  @Output() froalaInit: EventEmitter<Object> = new EventEmitter<Object>();\r\n\r\n  // update model if editor contentChanged\r\n  private updateModel() {\r\n    this.zone.run(() => {\r\n\r\n      let modelContent: any = null;\r\n\r\n      if (this._hasSpecialTag) {\r\n\r\n        let attributeNodes = this._element.attributes;\r\n        let attrs = {};\r\n\r\n        for (let i = 0; i < attributeNodes.length; i++) {\r\n\r\n          let attrName = attributeNodes[i].name;\r\n          if (this._opts.angularIgnoreAttrs && this._opts.angularIgnoreAttrs.indexOf(attrName) != -1) {\r\n            continue;\r\n          }\r\n\r\n          attrs[attrName] = attributeNodes[i].value;\r\n        }\r\n\r\n        if (this._element.innerHTML) {\r\n          attrs[this.INNER_HTML_ATTR] = this._element.innerHTML;\r\n        }\r\n\r\n        modelContent = attrs;\r\n      } else {\r\n\r\n        let returnedHtml: any = this._editor.html.get();\r\n        if (typeof returnedHtml === 'string') {\r\n          modelContent = returnedHtml;\r\n        }\r\n      }\r\n      if (this._oldModel !== modelContent) {\r\n        this._oldModel = modelContent;\r\n\r\n        // Update froalaModel.\r\n        this.froalaModelChange.emit(modelContent);\r\n\r\n        // Update form model.\r\n        this.onChange(modelContent);\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  private registerEvent(eventName, callback) {\r\n    if (!eventName || !callback) {\r\n      return;\r\n    }\r\n\r\n    if (!this._opts.events) {\r\n      this._opts.events = {};\r\n    }\r\n\r\n    this._opts.events[eventName] = callback;\r\n  }\r\n\r\n  private initListeners() {\r\n    let self = this;\r\n    // Check if we have events on the editor.\r\n    if (this._editor.events) {\r\n      // bind contentChange and keyup event to froalaModel\r\n      this._editor.events.on('contentChanged', function () {\r\n        self.updateModel();\r\n      });\r\n      this._editor.events.on('mousedown', function () {\r\n        setTimeout(function () {\r\n          self.onTouched();\r\n        }, 0);\r\n      });\r\n\r\n      if (this._opts.immediateAngularModelUpdate) {\r\n        this._editor.events.on('keyup', function () {\r\n          setTimeout(function () {\r\n            self.updateModel();\r\n          }, 0);\r\n        });\r\n      }\r\n    }\r\n\r\n    this._editorInitialized = true;\r\n  }\r\n\r\n  private createEditor() {\r\n    if (this._editorInitialized) {\r\n      return;\r\n    }\r\n\r\n    this.setContent(true);\r\n\r\n    // init editor\r\n    this.zone.runOutsideAngular(() => {\r\n      // Add listeners on initialized event.\r\n      if (!this._opts.events) this._opts.events = {};\r\n\r\n      // Register initialized event.\r\n      this.registerEvent('initialized', this._opts.events && this._opts.events.initialized);\r\n      const existingInitCallback = this._opts.events.initialized;\r\n      // Default initialized event.\r\n      if (!this._opts.events.initialized || !this._opts.events.initialized.overridden) {\r\n        this._opts.events.initialized = () => {\r\n          this.initListeners();\r\n          existingInitCallback && existingInitCallback.call(this._editor, this);\r\n        };\r\n        this._opts.events.initialized.overridden = true;\r\n      }\r\n\r\n      // Initialize the Froala Editor.\r\n      this._editor = new FroalaEditor(\r\n        this._element,\r\n        this._opts\r\n      );\r\n    });\r\n  }\r\n\r\n  private setHtml() {\r\n    this._editor.html.set(this._model || \"\");\r\n\r\n    // This will reset the undo stack everytime the model changes externally. Can we fix this?\r\n    this._editor.undo.reset();\r\n    this._editor.undo.saveStep();\r\n  }\r\n\r\n  private setContent(firstTime = false) {\r\n    let self = this;\r\n\r\n    // Set initial content\r\n    if (this._model || this._model == '') {\r\n      this._oldModel = this._model;\r\n      if (this._hasSpecialTag) {\r\n\r\n        let tags: Object = this._model;\r\n\r\n        // add tags on element\r\n        if (tags) {\r\n\r\n          for (let attr in tags) {\r\n            if (tags.hasOwnProperty(attr) && attr != this.INNER_HTML_ATTR) {\r\n              this._element.setAttribute(attr, tags[attr]);\r\n            }\r\n          }\r\n\r\n          if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {\r\n            this._element.innerHTML = tags[this.INNER_HTML_ATTR];\r\n          }\r\n        }\r\n      } else {\r\n        if (firstTime) {\r\n          this.registerEvent('initialized', function () {\r\n            self.setHtml();\r\n          });\r\n        } else {\r\n          self.setHtml();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private destroyEditor() {\r\n    if (this._editorInitialized) {\r\n      this._editor.destroy();\r\n      this._editorInitialized = false;\r\n    }\r\n  }\r\n\r\n  private getEditor() {\r\n    if (this._element) {\r\n      return this._editor;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  // send manual editor initialization\r\n  private generateManualController() {\r\n    let controls = {\r\n      initialize: this.createEditor.bind(this),\r\n      destroy: this.destroyEditor.bind(this),\r\n      getEditor: this.getEditor.bind(this),\r\n    };\r\n    this.froalaInit.emit(controls);\r\n  }\r\n\r\n  // TODO not sure if ngOnInit is executed after @inputs\r\n  ngAfterViewInit() {\r\n    // check if output froalaInit is present. Maybe observers is private and should not be used?? TODO how to better test that an output directive is present.\r\n    if (!this.froalaInit.observers.length) {\r\n      this.createEditor();\r\n    } else {\r\n      this.generateManualController();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyEditor();\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { FroalaEditorDirective } from './editor.directive';\r\n\r\n@NgModule({\r\n  declarations: [FroalaEditorDirective],\r\n  exports: [FroalaEditorDirective]\r\n})\r\n\r\nexport class FroalaEditorModule {\r\n  public static forRoot(): ModuleWithProviders<FroalaEditorModule> {\r\n    return {ngModule: FroalaEditorModule, providers: []};\r\n  }\r\n}\r\n","import { Directive, ElementRef, Renderer2, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[froalaView]'\r\n})\r\nexport class FroalaViewDirective {\r\n\r\n  private _element: HTMLElement;\r\n\r\n  constructor(private renderer: Renderer2, element: ElementRef) {\r\n    this._element = element.nativeElement;\r\n  }\r\n\r\n  // update content model as it comes\r\n  @Input() set froalaView(content: string) {\r\n    this._element.innerHTML = content;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.renderer.addClass(this._element, \"fr-view\");\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { FroalaViewDirective } from './view.directive';\r\n\r\n@NgModule({\r\n  declarations: [FroalaViewDirective],\r\n  exports: [FroalaViewDirective]\r\n})\r\nexport class FroalaViewModule {\r\n  public static forRoot(): ModuleWithProviders<FroalaViewModule> {\r\n    return {ngModule: FroalaViewModule, providers: []};\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { FroalaEditorModule } from './editor/editor.module';\r\nimport { FroalaViewModule } from './view/view.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FroalaEditorModule.forRoot(),\r\n    FroalaViewModule.forRoot()\r\n  ],\r\n  exports: [\r\n    FroalaEditorModule,\r\n    FroalaViewModule\r\n  ]\r\n})\r\nexport class FERootModule {\r\n\r\n}\r\n"]}