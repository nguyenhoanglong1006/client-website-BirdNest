{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscription_1 = require('../Subscription');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\n\n\nfunction bufferToggle(openings, closingSelector) {\n  return function bufferToggleOperatorFunction(source) {\n    return source.lift(new BufferToggleOperator(openings, closingSelector));\n  };\n}\n\nexports.bufferToggle = bufferToggle;\n\nvar BufferToggleOperator = function () {\n  function BufferToggleOperator(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  BufferToggleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  };\n\n  return BufferToggleOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar BufferToggleSubscriber = function (_super) {\n  __extends(BufferToggleSubscriber, _super);\n\n  function BufferToggleSubscriber(destination, openings, closingSelector) {\n    _super.call(this, destination);\n\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n    this.contexts = [];\n    this.add(subscribeToResult_1.subscribeToResult(this, openings));\n  }\n\n  BufferToggleSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n    var len = contexts.length;\n\n    for (var i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  };\n\n  BufferToggleSubscriber.prototype._error = function (err) {\n    var contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      var context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n\n    this.contexts = null;\n\n    _super.prototype._error.call(this, err);\n  };\n\n  BufferToggleSubscriber.prototype._complete = function () {\n    var contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      var context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n\n    this.contexts = null;\n\n    _super.prototype._complete.call(this);\n  };\n\n  BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  };\n\n  BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.closeBuffer(innerSub.context);\n  };\n\n  BufferToggleSubscriber.prototype.openBuffer = function (value) {\n    try {\n      var closingSelector = this.closingSelector;\n      var closingNotifier = closingSelector.call(this, value);\n\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  };\n\n  BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n    var contexts = this.contexts;\n\n    if (contexts && context) {\n      var buffer = context.buffer,\n          subscription = context.subscription;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  };\n\n  BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n    var contexts = this.contexts;\n    var buffer = [];\n    var subscription = new Subscription_1.Subscription();\n    var context = {\n      buffer: buffer,\n      subscription: subscription\n    };\n    contexts.push(context);\n    var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      innerSubscription.context = context;\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  };\n\n  return BufferToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber); //# sourceMappingURL=bufferToggle.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/operators/bufferToggle.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscription_1","require","subscribeToResult_1","OuterSubscriber_1","bufferToggle","openings","closingSelector","bufferToggleOperatorFunction","source","lift","BufferToggleOperator","exports","call","subscriber","subscribe","BufferToggleSubscriber","_super","destination","contexts","add","subscribeToResult","_next","value","len","length","i","buffer","push","_error","err","context","shift","subscription","unsubscribe","_complete","next","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","closeBuffer","openBuffer","notifyComplete","closingNotifier","trySubscribe","splice","indexOf","remove","Subscription","innerSubscription","closed","OuterSubscriber"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxD,OAAK,IAAIC,CAAT,IAAcD,CAAd,EAAiB,IAAIA,CAAC,CAACE,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBF,CAAC,CAACE,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAR;;AAC1C,WAASE,EAAT,GAAc;AAAE,SAAKC,WAAL,GAAmBL,CAAnB;AAAuB;;AACvCA,EAAAA,CAAC,CAACM,SAAF,GAAcL,CAAC,KAAK,IAAN,GAAaM,MAAM,CAACC,MAAP,CAAcP,CAAd,CAAb,IAAiCG,EAAE,CAACE,SAAH,GAAeL,CAAC,CAACK,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,CAJD;;AAKA,IAAIK,cAAc,GAAGC,OAAO,CAAC,iBAAD,CAA5B;;AACA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,2BAAD,CAAjC;;AACA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,oBAAD,CAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,YAAT,CAAsBC,QAAtB,EAAgCC,eAAhC,EAAiD;AAC7C,SAAO,SAASC,4BAAT,CAAsCC,MAAtC,EAA8C;AACjD,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,oBAAJ,CAAyBL,QAAzB,EAAmCC,eAAnC,CAAZ,CAAP;AACH,GAFD;AAGH;;AACDK,OAAO,CAACP,YAAR,GAAuBA,YAAvB;;AACA,IAAIM,oBAAoB,GAAI,YAAY;AACpC,WAASA,oBAAT,CAA8BL,QAA9B,EAAwCC,eAAxC,EAAyD;AACrD,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACH;;AACDI,EAAAA,oBAAoB,CAACb,SAArB,CAA+Be,IAA/B,GAAsC,UAAUC,UAAV,EAAsBL,MAAtB,EAA8B;AAChE,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,sBAAJ,CAA2BF,UAA3B,EAAuC,KAAKR,QAA5C,EAAsD,KAAKC,eAA3D,CAAjB,CAAP;AACH,GAFD;;AAGA,SAAOI,oBAAP;AACH,CAT2B,EAA5B;AAUA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,sBAAsB,GAAI,UAAUC,MAAV,EAAkB;AAC5C1B,EAAAA,SAAS,CAACyB,sBAAD,EAAyBC,MAAzB,CAAT;;AACA,WAASD,sBAAT,CAAgCE,WAAhC,EAA6CZ,QAA7C,EAAuDC,eAAvD,EAAwE;AACpEU,IAAAA,MAAM,CAACJ,IAAP,CAAY,IAAZ,EAAkBK,WAAlB;;AACA,SAAKZ,QAAL,GAAgBA,QAAhB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKY,QAAL,GAAgB,EAAhB;AACA,SAAKC,GAAL,CAASjB,mBAAmB,CAACkB,iBAApB,CAAsC,IAAtC,EAA4Cf,QAA5C,CAAT;AACH;;AACDU,EAAAA,sBAAsB,CAAClB,SAAvB,CAAiCwB,KAAjC,GAAyC,UAAUC,KAAV,EAAiB;AACtD,QAAIJ,QAAQ,GAAG,KAAKA,QAApB;AACA,QAAIK,GAAG,GAAGL,QAAQ,CAACM,MAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC1BP,MAAAA,QAAQ,CAACO,CAAD,CAAR,CAAYC,MAAZ,CAAmBC,IAAnB,CAAwBL,KAAxB;AACH;AACJ,GAND;;AAOAP,EAAAA,sBAAsB,CAAClB,SAAvB,CAAiC+B,MAAjC,GAA0C,UAAUC,GAAV,EAAe;AACrD,QAAIX,QAAQ,GAAG,KAAKA,QAApB;;AACA,WAAOA,QAAQ,CAACM,MAAT,GAAkB,CAAzB,EAA4B;AACxB,UAAIM,OAAO,GAAGZ,QAAQ,CAACa,KAAT,EAAd;AACAD,MAAAA,OAAO,CAACE,YAAR,CAAqBC,WAArB;AACAH,MAAAA,OAAO,CAACJ,MAAR,GAAiB,IAAjB;AACAI,MAAAA,OAAO,CAACE,YAAR,GAAuB,IAAvB;AACH;;AACD,SAAKd,QAAL,GAAgB,IAAhB;;AACAF,IAAAA,MAAM,CAACnB,SAAP,CAAiB+B,MAAjB,CAAwBhB,IAAxB,CAA6B,IAA7B,EAAmCiB,GAAnC;AACH,GAVD;;AAWAd,EAAAA,sBAAsB,CAAClB,SAAvB,CAAiCqC,SAAjC,GAA6C,YAAY;AACrD,QAAIhB,QAAQ,GAAG,KAAKA,QAApB;;AACA,WAAOA,QAAQ,CAACM,MAAT,GAAkB,CAAzB,EAA4B;AACxB,UAAIM,OAAO,GAAGZ,QAAQ,CAACa,KAAT,EAAd;AACA,WAAKd,WAAL,CAAiBkB,IAAjB,CAAsBL,OAAO,CAACJ,MAA9B;AACAI,MAAAA,OAAO,CAACE,YAAR,CAAqBC,WAArB;AACAH,MAAAA,OAAO,CAACJ,MAAR,GAAiB,IAAjB;AACAI,MAAAA,OAAO,CAACE,YAAR,GAAuB,IAAvB;AACH;;AACD,SAAKd,QAAL,GAAgB,IAAhB;;AACAF,IAAAA,MAAM,CAACnB,SAAP,CAAiBqC,SAAjB,CAA2BtB,IAA3B,CAAgC,IAAhC;AACH,GAXD;;AAYAG,EAAAA,sBAAsB,CAAClB,SAAvB,CAAiCuC,UAAjC,GAA8C,UAAUC,UAAV,EAAsBC,UAAtB,EAAkCC,UAAlC,EAA8CC,UAA9C,EAA0DC,QAA1D,EAAoE;AAC9GJ,IAAAA,UAAU,GAAG,KAAKK,WAAL,CAAiBL,UAAjB,CAAH,GAAkC,KAAKM,UAAL,CAAgBL,UAAhB,CAA5C;AACH,GAFD;;AAGAvB,EAAAA,sBAAsB,CAAClB,SAAvB,CAAiC+C,cAAjC,GAAkD,UAAUH,QAAV,EAAoB;AAClE,SAAKC,WAAL,CAAiBD,QAAQ,CAACX,OAA1B;AACH,GAFD;;AAGAf,EAAAA,sBAAsB,CAAClB,SAAvB,CAAiC8C,UAAjC,GAA8C,UAAUrB,KAAV,EAAiB;AAC3D,QAAI;AACA,UAAIhB,eAAe,GAAG,KAAKA,eAA3B;AACA,UAAIuC,eAAe,GAAGvC,eAAe,CAACM,IAAhB,CAAqB,IAArB,EAA2BU,KAA3B,CAAtB;;AACA,UAAIuB,eAAJ,EAAqB;AACjB,aAAKC,YAAL,CAAkBD,eAAlB;AACH;AACJ,KAND,CAOA,OAAOhB,GAAP,EAAY;AACR,WAAKD,MAAL,CAAYC,GAAZ;AACH;AACJ,GAXD;;AAYAd,EAAAA,sBAAsB,CAAClB,SAAvB,CAAiC6C,WAAjC,GAA+C,UAAUZ,OAAV,EAAmB;AAC9D,QAAIZ,QAAQ,GAAG,KAAKA,QAApB;;AACA,QAAIA,QAAQ,IAAIY,OAAhB,EAAyB;AACrB,UAAIJ,MAAM,GAAGI,OAAO,CAACJ,MAArB;AAAA,UAA6BM,YAAY,GAAGF,OAAO,CAACE,YAApD;AACA,WAAKf,WAAL,CAAiBkB,IAAjB,CAAsBT,MAAtB;AACAR,MAAAA,QAAQ,CAAC6B,MAAT,CAAgB7B,QAAQ,CAAC8B,OAAT,CAAiBlB,OAAjB,CAAhB,EAA2C,CAA3C;AACA,WAAKmB,MAAL,CAAYjB,YAAZ;AACAA,MAAAA,YAAY,CAACC,WAAb;AACH;AACJ,GATD;;AAUAlB,EAAAA,sBAAsB,CAAClB,SAAvB,CAAiCiD,YAAjC,GAAgD,UAAUD,eAAV,EAA2B;AACvE,QAAI3B,QAAQ,GAAG,KAAKA,QAApB;AACA,QAAIQ,MAAM,GAAG,EAAb;AACA,QAAIM,YAAY,GAAG,IAAIhC,cAAc,CAACkD,YAAnB,EAAnB;AACA,QAAIpB,OAAO,GAAG;AAAEJ,MAAAA,MAAM,EAAEA,MAAV;AAAkBM,MAAAA,YAAY,EAAEA;AAAhC,KAAd;AACAd,IAAAA,QAAQ,CAACS,IAAT,CAAcG,OAAd;AACA,QAAIqB,iBAAiB,GAAGjD,mBAAmB,CAACkB,iBAApB,CAAsC,IAAtC,EAA4CyB,eAA5C,EAA6Df,OAA7D,CAAxB;;AACA,QAAI,CAACqB,iBAAD,IAAsBA,iBAAiB,CAACC,MAA5C,EAAoD;AAChD,WAAKV,WAAL,CAAiBZ,OAAjB;AACH,KAFD,MAGK;AACDqB,MAAAA,iBAAiB,CAACrB,OAAlB,GAA4BA,OAA5B;AACA,WAAKX,GAAL,CAASgC,iBAAT;AACAnB,MAAAA,YAAY,CAACb,GAAb,CAAiBgC,iBAAjB;AACH;AACJ,GAfD;;AAgBA,SAAOpC,sBAAP;AACH,CApF6B,CAoF5BZ,iBAAiB,CAACkD,eApFU,CAA9B,C,CAqFA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nexports.bufferToggle = bufferToggle;\nvar BufferToggleOperator = (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = (function (_super) {\n    __extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, openings));\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            this.destination.next(context.buffer);\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription_1.Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map"]},"metadata":{},"sourceType":"script"}