{"ast":null,"code":"\"use strict\";\n\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\n\n\nfunction multicast(subjectOrSubjectFactory, selector) {\n  return function multicastOperatorFunction(source) {\n    var subjectFactory;\n\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n  };\n}\n\nexports.multicast = multicast;\n\nvar MulticastOperator = function () {\n  function MulticastOperator(subjectFactory, selector) {\n    this.subjectFactory = subjectFactory;\n    this.selector = selector;\n  }\n\n  MulticastOperator.prototype.call = function (subscriber, source) {\n    var selector = this.selector;\n    var subject = this.subjectFactory();\n    var subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  };\n\n  return MulticastOperator;\n}();\n\nexports.MulticastOperator = MulticastOperator; //# sourceMappingURL=multicast.js.map","map":{"version":3,"sources":["/Users/nguyenlong/ProjectCompany/2nMart/websiteclient-2nmart.vn/node_modules/ng5-slider/node_modules/rxjs/operators/multicast.js"],"names":["ConnectableObservable_1","require","multicast","subjectOrSubjectFactory","selector","multicastOperatorFunction","source","subjectFactory","lift","MulticastOperator","connectable","Object","create","connectableObservableDescriptor","exports","prototype","call","subscriber","subject","subscription","subscribe","add"],"mappings":"AAAA;;AACA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,qCAAD,CAArC;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAmBC,uBAAnB,EAA4CC,QAA5C,EAAsD;AAClD,SAAO,SAASC,yBAAT,CAAmCC,MAAnC,EAA2C;AAC9C,QAAIC,cAAJ;;AACA,QAAI,OAAOJ,uBAAP,KAAmC,UAAvC,EAAmD;AAC/CI,MAAAA,cAAc,GAAGJ,uBAAjB;AACH,KAFD,MAGK;AACDI,MAAAA,cAAc,GAAG,SAASA,cAAT,GAA0B;AACvC,eAAOJ,uBAAP;AACH,OAFD;AAGH;;AACD,QAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAChC,aAAOE,MAAM,CAACE,IAAP,CAAY,IAAIC,iBAAJ,CAAsBF,cAAtB,EAAsCH,QAAtC,CAAZ,CAAP;AACH;;AACD,QAAIM,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcN,MAAd,EAAsBN,uBAAuB,CAACa,+BAA9C,CAAlB;AACAH,IAAAA,WAAW,CAACJ,MAAZ,GAAqBA,MAArB;AACAI,IAAAA,WAAW,CAACH,cAAZ,GAA6BA,cAA7B;AACA,WAAOG,WAAP;AACH,GAjBD;AAkBH;;AACDI,OAAO,CAACZ,SAAR,GAAoBA,SAApB;;AACA,IAAIO,iBAAiB,GAAI,YAAY;AACjC,WAASA,iBAAT,CAA2BF,cAA3B,EAA2CH,QAA3C,EAAqD;AACjD,SAAKG,cAAL,GAAsBA,cAAtB;AACA,SAAKH,QAAL,GAAgBA,QAAhB;AACH;;AACDK,EAAAA,iBAAiB,CAACM,SAAlB,CAA4BC,IAA5B,GAAmC,UAAUC,UAAV,EAAsBX,MAAtB,EAA8B;AAC7D,QAAIF,QAAQ,GAAG,KAAKA,QAApB;AACA,QAAIc,OAAO,GAAG,KAAKX,cAAL,EAAd;AACA,QAAIY,YAAY,GAAGf,QAAQ,CAACc,OAAD,CAAR,CAAkBE,SAAlB,CAA4BH,UAA5B,CAAnB;AACAE,IAAAA,YAAY,CAACE,GAAb,CAAiBf,MAAM,CAACc,SAAP,CAAiBF,OAAjB,CAAjB;AACA,WAAOC,YAAP;AACH,GAND;;AAOA,SAAOV,iBAAP;AACH,CAbwB,EAAzB;;AAcAK,OAAO,CAACL,iBAAR,GAA4BA,iBAA5B,C,CACA","sourcesContent":["\"use strict\";\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexports.multicast = multicast;\nvar MulticastOperator = (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexports.MulticastOperator = MulticastOperator;\n//# sourceMappingURL=multicast.js.map"]},"metadata":{},"sourceType":"script"}