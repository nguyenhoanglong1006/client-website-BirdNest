{"ast":null,"code":"\"use strict\";\n\nvar map_1 = require('./map');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\n\n\nfunction pluck() {\n  var properties = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    properties[_i - 0] = arguments[_i];\n  }\n\n  var length = properties.length;\n\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n\n  return function (source) {\n    return map_1.map(plucker(properties, length))(source);\n  };\n}\n\nexports.pluck = pluck;\n\nfunction plucker(props, length) {\n  var mapper = function mapper(x) {\n    var currentProp = x;\n\n    for (var i = 0; i < length; i++) {\n      var p = currentProp[props[i]];\n\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n\n    return currentProp;\n  };\n\n  return mapper;\n} //# sourceMappingURL=pluck.js.map","map":{"version":3,"sources":["/Users/nguyenlong/ProjectCompany/2nMart/websiteclient-2nmart.vn/node_modules/ng5-slider/node_modules/rxjs/operators/pluck.js"],"names":["map_1","require","pluck","properties","_i","arguments","length","Error","source","map","plucker","exports","props","mapper","x","currentProp","i","p","undefined"],"mappings":"AAAA;;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,GAAiB;AACb,MAAIC,UAAU,GAAG,EAAjB;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,UAAU,CAACC,EAAE,GAAG,CAAN,CAAV,GAAqBC,SAAS,CAACD,EAAD,CAA9B;AACH;;AACD,MAAIE,MAAM,GAAGH,UAAU,CAACG,MAAxB;;AACA,MAAIA,MAAM,KAAK,CAAf,EAAkB;AACd,UAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACH;;AACD,SAAO,UAAUC,MAAV,EAAkB;AAAE,WAAOR,KAAK,CAACS,GAAN,CAAUC,OAAO,CAACP,UAAD,EAAaG,MAAb,CAAjB,EAAuCE,MAAvC,CAAP;AAAwD,GAAnF;AACH;;AACDG,OAAO,CAACT,KAAR,GAAgBA,KAAhB;;AACA,SAASQ,OAAT,CAAiBE,KAAjB,EAAwBN,MAAxB,EAAgC;AAC5B,MAAIO,MAAM,GAAG,SAATA,MAAS,CAAUC,CAAV,EAAa;AACtB,QAAIC,WAAW,GAAGD,CAAlB;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,MAApB,EAA4BU,CAAC,EAA7B,EAAiC;AAC7B,UAAIC,CAAC,GAAGF,WAAW,CAACH,KAAK,CAACI,CAAD,CAAN,CAAnB;;AACA,UAAI,OAAOC,CAAP,KAAa,WAAjB,EAA8B;AAC1BF,QAAAA,WAAW,GAAGE,CAAd;AACH,OAFD,MAGK;AACD,eAAOC,SAAP;AACH;AACJ;;AACD,WAAOH,WAAP;AACH,GAZD;;AAaA,SAAOF,MAAP;AACH,C,CACD","sourcesContent":["\"use strict\";\nvar map_1 = require('./map');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    var length = properties.length;\n    if (length === 0) {\n        throw new Error('list of properties cannot be empty.');\n    }\n    return function (source) { return map_1.map(plucker(properties, length))(source); };\n}\nexports.pluck = pluck;\nfunction plucker(props, length) {\n    var mapper = function (x) {\n        var currentProp = x;\n        for (var i = 0; i < length; i++) {\n            var p = currentProp[props[i]];\n            if (typeof p !== 'undefined') {\n                currentProp = p;\n            }\n            else {\n                return undefined;\n            }\n        }\n        return currentProp;\n    };\n    return mapper;\n}\n//# sourceMappingURL=pluck.js.map"]},"metadata":{},"sourceType":"script"}