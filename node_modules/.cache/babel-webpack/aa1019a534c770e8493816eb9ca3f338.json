{"ast":null,"code":"\"use strict\";\n\nvar race_1 = require('../operators/race'); // NOTE: to support backwards compatability with 5.4.* and lower\n\n\nvar race_2 = require('../observable/race');\n\nexports.raceStatic = race_2.race;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\n\nfunction race() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i - 0] = arguments[_i];\n  }\n\n  return race_1.race.apply(void 0, observables)(this);\n}\n\nexports.race = race; //# sourceMappingURL=race.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/operator/race.js"],"names":["race_1","require","race_2","exports","raceStatic","race","observables","_i","arguments","length","apply"],"mappings":"AAAA;;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,mBAAD,CAApB,C,CACA;;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,oBAAD,CAApB;;AACAE,OAAO,CAACC,UAAR,GAAqBF,MAAM,CAACG,IAA5B;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,IAAT,GAAgB;AACZ,MAAIC,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,WAAW,CAACC,EAAE,GAAG,CAAN,CAAX,GAAsBC,SAAS,CAACD,EAAD,CAA/B;AACH;;AACD,SAAOP,MAAM,CAACK,IAAP,CAAYK,KAAZ,CAAkB,KAAK,CAAvB,EAA0BJ,WAA1B,EAAuC,IAAvC,CAAP;AACH;;AACDH,OAAO,CAACE,IAAR,GAAeA,IAAf,C,CACA","sourcesContent":["\"use strict\";\nvar race_1 = require('../operators/race');\n// NOTE: to support backwards compatability with 5.4.* and lower\nvar race_2 = require('../observable/race');\nexports.raceStatic = race_2.race;\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return race_1.race.apply(void 0, observables)(this);\n}\nexports.race = race;\n//# sourceMappingURL=race.js.map"]},"metadata":{},"sourceType":"script"}