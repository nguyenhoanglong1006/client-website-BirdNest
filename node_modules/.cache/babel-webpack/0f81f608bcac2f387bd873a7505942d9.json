{"ast":null,"code":"\"use strict\";\n\nvar isArray_1 = require('./util/isArray');\n\nvar isObject_1 = require('./util/isObject');\n\nvar isFunction_1 = require('./util/isFunction');\n\nvar tryCatch_1 = require('./util/tryCatch');\n\nvar errorObject_1 = require('./util/errorObject');\n\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\n\n\nvar Subscription = function () {\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  function Subscription(unsubscribe) {\n    /**\n     * A flag to indicate whether this Subscription has already been unsubscribed.\n     * @type {boolean}\n     */\n    this.closed = false;\n    this._parent = null;\n    this._parents = null;\n    this._subscriptions = null;\n\n    if (unsubscribe) {\n      this._unsubscribe = unsubscribe;\n    }\n  }\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n\n\n  Subscription.prototype.unsubscribe = function () {\n    var hasErrors = false;\n    var errors;\n\n    if (this.closed) {\n      return;\n    }\n\n    var _a = this,\n        _parent = _a._parent,\n        _parents = _a._parents,\n        _unsubscribe = _a._unsubscribe,\n        _subscriptions = _a._subscriptions;\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null; // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n\n    this._subscriptions = null;\n    var index = -1;\n    var len = _parents ? _parents.length : 0; // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n\n    while (_parent) {\n      _parent.remove(this); // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n\n\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction_1.isFunction(_unsubscribe)) {\n      var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n\n      if (trial === errorObject_1.errorObject) {\n        hasErrors = true;\n        errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n      }\n    }\n\n    if (isArray_1.isArray(_subscriptions)) {\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        var sub = _subscriptions[index];\n\n        if (isObject_1.isObject(sub)) {\n          var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n\n          if (trial === errorObject_1.errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            var err = errorObject_1.errorObject.e;\n\n            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n    }\n  };\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n\n\n  Subscription.prototype.add = function (teardown) {\n    if (!teardown || teardown === Subscription.EMPTY) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    var subscription = teardown;\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(teardown);\n\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function'\n        /* quack quack */\n        ) {\n          var tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n\n        break;\n\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    var subscriptions = this._subscriptions || (this._subscriptions = []);\n    subscriptions.push(subscription);\n\n    subscription._addParent(this);\n\n    return subscription;\n  };\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n\n\n  Subscription.prototype.remove = function (subscription) {\n    var subscriptions = this._subscriptions;\n\n    if (subscriptions) {\n      var subscriptionIndex = subscriptions.indexOf(subscription);\n\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  };\n\n  Subscription.prototype._addParent = function (parent) {\n    var _a = this,\n        _parent = _a._parent,\n        _parents = _a._parents;\n\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  };\n\n  Subscription.EMPTY = function (empty) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription());\n\n  return Subscription;\n}();\n\nexports.Subscription = Subscription;\n\nfunction flattenUnsubscriptionErrors(errors) {\n  return errors.reduce(function (errs, err) {\n    return errs.concat(err instanceof UnsubscriptionError_1.UnsubscriptionError ? err.errors : err);\n  }, []);\n} //# sourceMappingURL=Subscription.js.map","map":{"version":3,"sources":["/Users/nguyenlong/ProjectCompany/2nMart/websiteclient-2nmart.vn/node_modules/ng5-slider/node_modules/rxjs/Subscription.js"],"names":["isArray_1","require","isObject_1","isFunction_1","tryCatch_1","errorObject_1","UnsubscriptionError_1","Subscription","unsubscribe","closed","_parent","_parents","_subscriptions","_unsubscribe","prototype","hasErrors","errors","_a","index","len","length","remove","isFunction","trial","tryCatch","call","errorObject","e","UnsubscriptionError","flattenUnsubscriptionErrors","isArray","sub","isObject","err","concat","push","add","teardown","EMPTY","subscription","_addParent","tmp","Error","subscriptions","subscriptionIndex","indexOf","splice","parent","empty","exports","reduce","errs"],"mappings":"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","sourcesContent":["\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map"]},"metadata":{},"sourceType":"script"}