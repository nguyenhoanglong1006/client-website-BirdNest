{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\n\n\nfunction switchMap(project, resultSelector) {\n  return function switchMapOperatorFunction(source) {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nexports.switchMap = switchMap;\n\nvar SwitchMapOperator = function () {\n  function SwitchMapOperator(project, resultSelector) {\n    this.project = project;\n    this.resultSelector = resultSelector;\n  }\n\n  SwitchMapOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  };\n\n  return SwitchMapOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar SwitchMapSubscriber = function (_super) {\n  __extends(SwitchMapSubscriber, _super);\n\n  function SwitchMapSubscriber(destination, project, resultSelector) {\n    _super.call(this, destination);\n\n    this.project = project;\n    this.resultSelector = resultSelector;\n    this.index = 0;\n  }\n\n  SwitchMapSubscriber.prototype._next = function (value) {\n    var result;\n    var index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n\n    this._innerSub(result, value, index);\n  };\n\n  SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n    var innerSubscription = this.innerSubscription;\n\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n\n    this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n  };\n\n  SwitchMapSubscriber.prototype._complete = function () {\n    var innerSubscription = this.innerSubscription;\n\n    if (!innerSubscription || innerSubscription.closed) {\n      _super.prototype._complete.call(this);\n    }\n  };\n  /** @deprecated internal use only */\n\n\n  SwitchMapSubscriber.prototype._unsubscribe = function () {\n    this.innerSubscription = null;\n  };\n\n  SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n\n    if (this.isStopped) {\n      _super.prototype._complete.call(this);\n    }\n  };\n\n  SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  };\n\n  SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n    var result;\n\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(result);\n  };\n\n  return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber); //# sourceMappingURL=switchMap.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/operators/switchMap.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","OuterSubscriber_1","require","subscribeToResult_1","switchMap","project","resultSelector","switchMapOperatorFunction","source","lift","SwitchMapOperator","exports","call","subscriber","subscribe","SwitchMapSubscriber","_super","destination","index","_next","value","result","error","_innerSub","innerSubscription","unsubscribe","add","subscribeToResult","_complete","closed","_unsubscribe","notifyComplete","innerSub","remove","isStopped","notifyNext","outerValue","innerValue","outerIndex","innerIndex","_tryNotifyNext","next","err","OuterSubscriber"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nexports.switchMap = switchMap;\nvar SwitchMapOperator = (function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = (function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    /** @deprecated internal use only */ SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map"]},"metadata":{},"sourceType":"script"}