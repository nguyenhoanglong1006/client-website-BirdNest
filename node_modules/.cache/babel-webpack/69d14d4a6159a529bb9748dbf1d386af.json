{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\n\n\nfunction switchMapTo(innerObservable, resultSelector) {\n  return function (source) {\n    return source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n  };\n}\n\nexports.switchMapTo = switchMapTo;\n\nvar SwitchMapToOperator = function () {\n  function SwitchMapToOperator(observable, resultSelector) {\n    this.observable = observable;\n    this.resultSelector = resultSelector;\n  }\n\n  SwitchMapToOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  };\n\n  return SwitchMapToOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar SwitchMapToSubscriber = function (_super) {\n  __extends(SwitchMapToSubscriber, _super);\n\n  function SwitchMapToSubscriber(destination, inner, resultSelector) {\n    _super.call(this, destination);\n\n    this.inner = inner;\n    this.resultSelector = resultSelector;\n    this.index = 0;\n  }\n\n  SwitchMapToSubscriber.prototype._next = function (value) {\n    var innerSubscription = this.innerSubscription;\n\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n\n    this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n  };\n\n  SwitchMapToSubscriber.prototype._complete = function () {\n    var innerSubscription = this.innerSubscription;\n\n    if (!innerSubscription || innerSubscription.closed) {\n      _super.prototype._complete.call(this);\n    }\n  };\n  /** @deprecated internal use only */\n\n\n  SwitchMapToSubscriber.prototype._unsubscribe = function () {\n    this.innerSubscription = null;\n  };\n\n  SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n\n    if (this.isStopped) {\n      _super.prototype._complete.call(this);\n    }\n  };\n\n  SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var _a = this,\n        resultSelector = _a.resultSelector,\n        destination = _a.destination;\n\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  };\n\n  SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n    var _a = this,\n        resultSelector = _a.resultSelector,\n        destination = _a.destination;\n\n    var result;\n\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  };\n\n  return SwitchMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber); //# sourceMappingURL=switchMapTo.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/operators/switchMapTo.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","OuterSubscriber_1","require","subscribeToResult_1","switchMapTo","innerObservable","resultSelector","source","lift","SwitchMapToOperator","exports","observable","call","subscriber","subscribe","SwitchMapToSubscriber","_super","destination","inner","index","_next","value","innerSubscription","unsubscribe","add","subscribeToResult","_complete","closed","_unsubscribe","notifyComplete","innerSub","remove","isStopped","notifyNext","outerValue","innerValue","outerIndex","innerIndex","_a","tryResultSelector","next","result","err","error","OuterSubscriber"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return function (source) { return source.lift(new SwitchMapToOperator(innerObservable, resultSelector)); };\n}\nexports.switchMapTo = switchMapTo;\nvar SwitchMapToOperator = (function () {\n    function SwitchMapToOperator(observable, resultSelector) {\n        this.observable = observable;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n    };\n    return SwitchMapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapToSubscriber = (function (_super) {\n    __extends(SwitchMapToSubscriber, _super);\n    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n        _super.call(this, destination);\n        this.inner = inner;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapToSubscriber.prototype._next = function (value) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n    };\n    SwitchMapToSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    /** @deprecated internal use only */ SwitchMapToSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    return SwitchMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMapTo.js.map"]},"metadata":{},"sourceType":"script"}