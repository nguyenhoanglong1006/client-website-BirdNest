{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\n\n\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n    resultSelector = null;\n  }\n\n  return function (source) {\n    return source.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent));\n  };\n}\n\nexports.mergeMapTo = mergeMapTo; // TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\n\nvar MergeMapToOperator = function () {\n  function MergeMapToOperator(ish, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    this.ish = ish;\n    this.resultSelector = resultSelector;\n    this.concurrent = concurrent;\n  }\n\n  MergeMapToOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  };\n\n  return MergeMapToOperator;\n}();\n\nexports.MergeMapToOperator = MergeMapToOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar MergeMapToSubscriber = function (_super) {\n  __extends(MergeMapToSubscriber, _super);\n\n  function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    _super.call(this, destination);\n\n    this.ish = ish;\n    this.resultSelector = resultSelector;\n    this.concurrent = concurrent;\n    this.hasCompleted = false;\n    this.buffer = [];\n    this.active = 0;\n    this.index = 0;\n  }\n\n  MergeMapToSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      var resultSelector = this.resultSelector;\n      var index = this.index++;\n      var ish = this.ish;\n      var destination = this.destination;\n      this.active++;\n\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n    this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n  };\n\n  MergeMapToSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  };\n\n  MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var _a = this,\n        resultSelector = _a.resultSelector,\n        destination = _a.destination;\n\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  };\n\n  MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n    var _a = this,\n        resultSelector = _a.resultSelector,\n        destination = _a.destination;\n\n    var result;\n\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  };\n\n  MergeMapToSubscriber.prototype.notifyError = function (err) {\n    this.destination.error(err);\n  };\n\n  MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n    var buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n\n  return MergeMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n\nexports.MergeMapToSubscriber = MergeMapToSubscriber; //# sourceMappingURL=mergeMapTo.js.map","map":{"version":3,"sources":["/Users/nguyenlong/ProjectCompany/2nMart/websiteclient-2nmart.vn/node_modules/ng5-slider/node_modules/rxjs/operators/mergeMapTo.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","OuterSubscriber_1","require","subscribeToResult_1","mergeMapTo","innerObservable","resultSelector","concurrent","Number","POSITIVE_INFINITY","source","lift","MergeMapToOperator","exports","ish","call","observer","subscribe","MergeMapToSubscriber","_super","destination","hasCompleted","buffer","active","index","_next","value","_innerSub","push","add","subscribeToResult","_complete","length","complete","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","_a","trySelectResult","next","result","err","error","notifyError","notifyComplete","remove","shift","OuterSubscriber"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxD,OAAK,IAAIC,CAAT,IAAcD,CAAd,EAAiB,IAAIA,CAAC,CAACE,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBF,CAAC,CAACE,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAR;;AAC1C,WAASE,EAAT,GAAc;AAAE,SAAKC,WAAL,GAAmBL,CAAnB;AAAuB;;AACvCA,EAAAA,CAAC,CAACM,SAAF,GAAcL,CAAC,KAAK,IAAN,GAAaM,MAAM,CAACC,MAAP,CAAcP,CAAd,CAAb,IAAiCG,EAAE,CAACE,SAAH,GAAeL,CAAC,CAACK,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,CAJD;;AAKA,IAAIK,iBAAiB,GAAGC,OAAO,CAAC,oBAAD,CAA/B;;AACA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,2BAAD,CAAjC;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,UAAT,CAAoBC,eAApB,EAAqCC,cAArC,EAAqDC,UAArD,EAAiE;AAC7D,MAAIA,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAEA,IAAAA,UAAU,GAAGC,MAAM,CAACC,iBAApB;AAAwC;;AACrE,MAAI,OAAOH,cAAP,KAA0B,QAA9B,EAAwC;AACpCC,IAAAA,UAAU,GAAGD,cAAb;AACAA,IAAAA,cAAc,GAAG,IAAjB;AACH;;AACD,SAAO,UAAUI,MAAV,EAAkB;AAAE,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,kBAAJ,CAAuBP,eAAvB,EAAwCC,cAAxC,EAAwDC,UAAxD,CAAZ,CAAP;AAA0F,GAArH;AACH;;AACDM,OAAO,CAACT,UAAR,GAAqBA,UAArB,C,CACA;AACA;;AACA,IAAIQ,kBAAkB,GAAI,YAAY;AAClC,WAASA,kBAAT,CAA4BE,GAA5B,EAAiCR,cAAjC,EAAiDC,UAAjD,EAA6D;AACzD,QAAIA,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAEA,MAAAA,UAAU,GAAGC,MAAM,CAACC,iBAApB;AAAwC;;AACrE,SAAKK,GAAL,GAAWA,GAAX;AACA,SAAKR,cAAL,GAAsBA,cAAtB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACH;;AACDK,EAAAA,kBAAkB,CAACd,SAAnB,CAA6BiB,IAA7B,GAAoC,UAAUC,QAAV,EAAoBN,MAApB,EAA4B;AAC5D,WAAOA,MAAM,CAACO,SAAP,CAAiB,IAAIC,oBAAJ,CAAyBF,QAAzB,EAAmC,KAAKF,GAAxC,EAA6C,KAAKR,cAAlD,EAAkE,KAAKC,UAAvE,CAAjB,CAAP;AACH,GAFD;;AAGA,SAAOK,kBAAP;AACH,CAXyB,EAA1B;;AAYAC,OAAO,CAACD,kBAAR,GAA6BA,kBAA7B;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIM,oBAAoB,GAAI,UAAUC,MAAV,EAAkB;AAC1C5B,EAAAA,SAAS,CAAC2B,oBAAD,EAAuBC,MAAvB,CAAT;;AACA,WAASD,oBAAT,CAA8BE,WAA9B,EAA2CN,GAA3C,EAAgDR,cAAhD,EAAgEC,UAAhE,EAA4E;AACxE,QAAIA,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAEA,MAAAA,UAAU,GAAGC,MAAM,CAACC,iBAApB;AAAwC;;AACrEU,IAAAA,MAAM,CAACJ,IAAP,CAAY,IAAZ,EAAkBK,WAAlB;;AACA,SAAKN,GAAL,GAAWA,GAAX;AACA,SAAKR,cAAL,GAAsBA,cAAtB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKc,YAAL,GAAoB,KAApB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,KAAL,GAAa,CAAb;AACH;;AACDN,EAAAA,oBAAoB,CAACpB,SAArB,CAA+B2B,KAA/B,GAAuC,UAAUC,KAAV,EAAiB;AACpD,QAAI,KAAKH,MAAL,GAAc,KAAKhB,UAAvB,EAAmC;AAC/B,UAAID,cAAc,GAAG,KAAKA,cAA1B;AACA,UAAIkB,KAAK,GAAG,KAAKA,KAAL,EAAZ;AACA,UAAIV,GAAG,GAAG,KAAKA,GAAf;AACA,UAAIM,WAAW,GAAG,KAAKA,WAAvB;AACA,WAAKG,MAAL;;AACA,WAAKI,SAAL,CAAeb,GAAf,EAAoBM,WAApB,EAAiCd,cAAjC,EAAiDoB,KAAjD,EAAwDF,KAAxD;AACH,KAPD,MAQK;AACD,WAAKF,MAAL,CAAYM,IAAZ,CAAiBF,KAAjB;AACH;AACJ,GAZD;;AAaAR,EAAAA,oBAAoB,CAACpB,SAArB,CAA+B6B,SAA/B,GAA2C,UAAUb,GAAV,EAAeM,WAAf,EAA4Bd,cAA5B,EAA4CoB,KAA5C,EAAmDF,KAAnD,EAA0D;AACjG,SAAKK,GAAL,CAAS1B,mBAAmB,CAAC2B,iBAApB,CAAsC,IAAtC,EAA4ChB,GAA5C,EAAiDY,KAAjD,EAAwDF,KAAxD,CAAT;AACH,GAFD;;AAGAN,EAAAA,oBAAoB,CAACpB,SAArB,CAA+BiC,SAA/B,GAA2C,YAAY;AACnD,SAAKV,YAAL,GAAoB,IAApB;;AACA,QAAI,KAAKE,MAAL,KAAgB,CAAhB,IAAqB,KAAKD,MAAL,CAAYU,MAAZ,KAAuB,CAAhD,EAAmD;AAC/C,WAAKZ,WAAL,CAAiBa,QAAjB;AACH;AACJ,GALD;;AAMAf,EAAAA,oBAAoB,CAACpB,SAArB,CAA+BoC,UAA/B,GAA4C,UAAUC,UAAV,EAAsBC,UAAtB,EAAkCC,UAAlC,EAA8CC,UAA9C,EAA0DC,QAA1D,EAAoE;AAC5G,QAAIC,EAAE,GAAG,IAAT;AAAA,QAAelC,cAAc,GAAGkC,EAAE,CAAClC,cAAnC;AAAA,QAAmDc,WAAW,GAAGoB,EAAE,CAACpB,WAApE;;AACA,QAAId,cAAJ,EAAoB;AAChB,WAAKmC,eAAL,CAAqBN,UAArB,EAAiCC,UAAjC,EAA6CC,UAA7C,EAAyDC,UAAzD;AACH,KAFD,MAGK;AACDlB,MAAAA,WAAW,CAACsB,IAAZ,CAAiBN,UAAjB;AACH;AACJ,GARD;;AASAlB,EAAAA,oBAAoB,CAACpB,SAArB,CAA+B2C,eAA/B,GAAiD,UAAUN,UAAV,EAAsBC,UAAtB,EAAkCC,UAAlC,EAA8CC,UAA9C,EAA0D;AACvG,QAAIE,EAAE,GAAG,IAAT;AAAA,QAAelC,cAAc,GAAGkC,EAAE,CAAClC,cAAnC;AAAA,QAAmDc,WAAW,GAAGoB,EAAE,CAACpB,WAApE;;AACA,QAAIuB,MAAJ;;AACA,QAAI;AACAA,MAAAA,MAAM,GAAGrC,cAAc,CAAC6B,UAAD,EAAaC,UAAb,EAAyBC,UAAzB,EAAqCC,UAArC,CAAvB;AACH,KAFD,CAGA,OAAOM,GAAP,EAAY;AACRxB,MAAAA,WAAW,CAACyB,KAAZ,CAAkBD,GAAlB;AACA;AACH;;AACDxB,IAAAA,WAAW,CAACsB,IAAZ,CAAiBC,MAAjB;AACH,GAXD;;AAYAzB,EAAAA,oBAAoB,CAACpB,SAArB,CAA+BgD,WAA/B,GAA6C,UAAUF,GAAV,EAAe;AACxD,SAAKxB,WAAL,CAAiByB,KAAjB,CAAuBD,GAAvB;AACH,GAFD;;AAGA1B,EAAAA,oBAAoB,CAACpB,SAArB,CAA+BiD,cAA/B,GAAgD,UAAUR,QAAV,EAAoB;AAChE,QAAIjB,MAAM,GAAG,KAAKA,MAAlB;AACA,SAAK0B,MAAL,CAAYT,QAAZ;AACA,SAAKhB,MAAL;;AACA,QAAID,MAAM,CAACU,MAAP,GAAgB,CAApB,EAAuB;AACnB,WAAKP,KAAL,CAAWH,MAAM,CAAC2B,KAAP,EAAX;AACH,KAFD,MAGK,IAAI,KAAK1B,MAAL,KAAgB,CAAhB,IAAqB,KAAKF,YAA9B,EAA4C;AAC7C,WAAKD,WAAL,CAAiBa,QAAjB;AACH;AACJ,GAVD;;AAWA,SAAOf,oBAAP;AACH,CAvE2B,CAuE1BjB,iBAAiB,CAACiD,eAvEQ,CAA5B;;AAwEArC,OAAO,CAACK,oBAAR,GAA+BA,oBAA/B,C,CACA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n        resultSelector = null;\n    }\n    return function (source) { return source.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent)); };\n}\nexports.mergeMapTo = mergeMapTo;\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nvar MergeMapToOperator = (function () {\n    function MergeMapToOperator(ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapToOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n    };\n    return MergeMapToOperator;\n}());\nexports.MergeMapToOperator = MergeMapToOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapToSubscriber = (function (_super) {\n    __extends(MergeMapToSubscriber, _super);\n    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapToSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var resultSelector = this.resultSelector;\n            var index = this.index++;\n            var ish = this.ish;\n            var destination = this.destination;\n            this.active++;\n            this._innerSub(ish, destination, resultSelector, value, index);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapToSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    MergeMapToSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapToSubscriber = MergeMapToSubscriber;\n//# sourceMappingURL=mergeMapTo.js.map"]},"metadata":{},"sourceType":"script"}