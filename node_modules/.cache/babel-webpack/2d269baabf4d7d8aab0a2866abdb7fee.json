{"ast":null,"code":"\"use strict\";\n\nvar ReplaySubject_1 = require('../ReplaySubject');\n/**\n * @method shareReplay\n * @owner Observable\n */\n\n\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n  return function (source) {\n    return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n  };\n}\n\nexports.shareReplay = shareReplay;\n\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next: function next(value) {\n          subject.next(value);\n        },\n        error: function error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function complete() {\n          isComplete = true;\n          subject.complete();\n        }\n      });\n    }\n\n    var innerSub = subject.subscribe(this);\n    return function () {\n      refCount--;\n      innerSub.unsubscribe();\n\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n}\n\n; //# sourceMappingURL=shareReplay.js.map","map":{"version":3,"sources":["/Users/nguyenlong/ProjectCompany/2nMart/websiteclient-2nmart.vn/node_modules/ng5-slider/node_modules/rxjs/operators/shareReplay.js"],"names":["ReplaySubject_1","require","shareReplay","bufferSize","windowTime","scheduler","source","lift","shareReplayOperator","exports","subject","refCount","subscription","hasError","isComplete","shareReplayOperation","ReplaySubject","subscribe","next","value","error","err","complete","innerSub","unsubscribe"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAGC,OAAO,CAAC,kBAAD,CAA7B;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBC,UAArB,EAAiCC,UAAjC,EAA6CC,SAA7C,EAAwD;AACpD,SAAO,UAAUC,MAAV,EAAkB;AAAE,WAAOA,MAAM,CAACC,IAAP,CAAYC,mBAAmB,CAACL,UAAD,EAAaC,UAAb,EAAyBC,SAAzB,CAA/B,CAAP;AAA6E,GAAxG;AACH;;AACDI,OAAO,CAACP,WAAR,GAAsBA,WAAtB;;AACA,SAASM,mBAAT,CAA6BL,UAA7B,EAAyCC,UAAzC,EAAqDC,SAArD,EAAgE;AAC5D,MAAIK,OAAJ;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,YAAJ;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,UAAU,GAAG,KAAjB;AACA,SAAO,SAASC,oBAAT,CAA8BT,MAA9B,EAAsC;AACzCK,IAAAA,QAAQ;;AACR,QAAI,CAACD,OAAD,IAAYG,QAAhB,EAA0B;AACtBA,MAAAA,QAAQ,GAAG,KAAX;AACAH,MAAAA,OAAO,GAAG,IAAIV,eAAe,CAACgB,aAApB,CAAkCb,UAAlC,EAA8CC,UAA9C,EAA0DC,SAA1D,CAAV;AACAO,MAAAA,YAAY,GAAGN,MAAM,CAACW,SAAP,CAAiB;AAC5BC,QAAAA,IAAI,EAAE,SAANA,IAAM,CAAUC,KAAV,EAAiB;AAAET,UAAAA,OAAO,CAACQ,IAAR,CAAaC,KAAb;AAAsB,SADnB;AAE5BC,QAAAA,KAAK,EAAE,SAAPA,KAAO,CAAUC,GAAV,EAAe;AAClBR,UAAAA,QAAQ,GAAG,IAAX;AACAH,UAAAA,OAAO,CAACU,KAAR,CAAcC,GAAd;AACH,SAL2B;AAM5BC,QAAAA,QAAQ,EAAE,SAAVA,QAAU,GAAY;AAClBR,UAAAA,UAAU,GAAG,IAAb;AACAJ,UAAAA,OAAO,CAACY,QAAR;AACH;AAT2B,OAAjB,CAAf;AAWH;;AACD,QAAIC,QAAQ,GAAGb,OAAO,CAACO,SAAR,CAAkB,IAAlB,CAAf;AACA,WAAO,YAAY;AACfN,MAAAA,QAAQ;AACRY,MAAAA,QAAQ,CAACC,WAAT;;AACA,UAAIZ,YAAY,IAAID,QAAQ,KAAK,CAA7B,IAAkCG,UAAtC,EAAkD;AAC9CF,QAAAA,YAAY,CAACY,WAAb;AACH;AACJ,KAND;AAOH,GAzBD;AA0BH;;AACD,C,CACA","sourcesContent":["\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return function (source) { return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler)); };\n}\nexports.shareReplay = shareReplay;\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n    var subject;\n    var refCount = 0;\n    var subscription;\n    var hasError = false;\n    var isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next: function (value) { subject.next(value); },\n                error: function (err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete: function () {\n                    isComplete = true;\n                    subject.complete();\n                },\n            });\n        }\n        var innerSub = subject.subscribe(this);\n        return function () {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && refCount === 0 && isComplete) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n}\n;\n//# sourceMappingURL=shareReplay.js.map"]},"metadata":{},"sourceType":"script"}