{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar isArray_1 = require('../util/isArray');\n\nvar isArrayLike_1 = require('../util/isArrayLike');\n\nvar isPromise_1 = require('../util/isPromise');\n\nvar PromiseObservable_1 = require('./PromiseObservable');\n\nvar IteratorObservable_1 = require('./IteratorObservable');\n\nvar ArrayObservable_1 = require('./ArrayObservable');\n\nvar ArrayLikeObservable_1 = require('./ArrayLikeObservable');\n\nvar iterator_1 = require('../symbol/iterator');\n\nvar Observable_1 = require('../Observable');\n\nvar observeOn_1 = require('../operators/observeOn');\n\nvar observable_1 = require('../symbol/observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar FromObservable = function (_super) {\n  __extends(FromObservable, _super);\n\n  function FromObservable(ish, scheduler) {\n    _super.call(this, null);\n\n    this.ish = ish;\n    this.scheduler = scheduler;\n  }\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n\n\n  FromObservable.create = function (ish, scheduler) {\n    if (ish != null) {\n      if (typeof ish[observable_1.observable] === 'function') {\n        if (ish instanceof Observable_1.Observable && !scheduler) {\n          return ish;\n        }\n\n        return new FromObservable(ish, scheduler);\n      } else if (isArray_1.isArray(ish)) {\n        return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n      } else if (isPromise_1.isPromise(ish)) {\n        return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n      } else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n      } else if (isArrayLike_1.isArrayLike(ish)) {\n        return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  };\n  /** @deprecated internal use only */\n\n\n  FromObservable.prototype._subscribe = function (subscriber) {\n    var ish = this.ish;\n    var scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      return ish[observable_1.observable]().subscribe(subscriber);\n    } else {\n      return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  };\n\n  return FromObservable;\n}(Observable_1.Observable);\n\nexports.FromObservable = FromObservable; //# sourceMappingURL=FromObservable.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/observable/FromObservable.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","isArray_1","require","isArrayLike_1","isPromise_1","PromiseObservable_1","IteratorObservable_1","ArrayObservable_1","ArrayLikeObservable_1","iterator_1","Observable_1","observeOn_1","observable_1","FromObservable","_super","ish","scheduler","call","observable","Observable","isArray","ArrayObservable","isPromise","PromiseObservable","iterator","IteratorObservable","isArrayLike","ArrayLikeObservable","TypeError","_subscribe","subscriber","subscribe","ObserveOnSubscriber","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar isArrayLike_1 = require('../util/isArrayLike');\nvar isPromise_1 = require('../util/isPromise');\nvar PromiseObservable_1 = require('./PromiseObservable');\nvar IteratorObservable_1 = require('./IteratorObservable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar ArrayLikeObservable_1 = require('./ArrayLikeObservable');\nvar iterator_1 = require('../symbol/iterator');\nvar Observable_1 = require('../Observable');\nvar observeOn_1 = require('../operators/observeOn');\nvar observable_1 = require('../symbol/observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = (function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_1.observable] === 'function') {\n                if (ish instanceof Observable_1.Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray_1.isArray(ish)) {\n                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise_1.isPromise(ish)) {\n                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike_1.isArrayLike(ish)) {\n                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    /** @deprecated internal use only */ FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_1.observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_1.Observable));\nexports.FromObservable = FromObservable;\n//# sourceMappingURL=FromObservable.js.map"]},"metadata":{},"sourceType":"script"}