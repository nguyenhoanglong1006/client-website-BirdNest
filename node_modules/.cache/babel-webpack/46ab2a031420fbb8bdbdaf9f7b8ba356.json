{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subject_1 = require('../Subject');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\n\n\nfunction window(windowBoundaries) {\n  return function windowOperatorFunction(source) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nexports.window = window;\n\nvar WindowOperator = function () {\n  function WindowOperator(windowBoundaries) {\n    this.windowBoundaries = windowBoundaries;\n  }\n\n  WindowOperator.prototype.call = function (subscriber, source) {\n    var windowSubscriber = new WindowSubscriber(subscriber);\n    var sourceSubscription = source.subscribe(windowSubscriber);\n\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n\n    return sourceSubscription;\n  };\n\n  return WindowOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar WindowSubscriber = function (_super) {\n  __extends(WindowSubscriber, _super);\n\n  function WindowSubscriber(destination) {\n    _super.call(this, destination);\n\n    this.window = new Subject_1.Subject();\n    destination.next(this.window);\n  }\n\n  WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.openWindow();\n  };\n\n  WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n    this._error(error);\n  };\n\n  WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n    this._complete();\n  };\n\n  WindowSubscriber.prototype._next = function (value) {\n    this.window.next(value);\n  };\n\n  WindowSubscriber.prototype._error = function (err) {\n    this.window.error(err);\n    this.destination.error(err);\n  };\n\n  WindowSubscriber.prototype._complete = function () {\n    this.window.complete();\n    this.destination.complete();\n  };\n  /** @deprecated internal use only */\n\n\n  WindowSubscriber.prototype._unsubscribe = function () {\n    this.window = null;\n  };\n\n  WindowSubscriber.prototype.openWindow = function () {\n    var prevWindow = this.window;\n\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    var destination = this.destination;\n    var newWindow = this.window = new Subject_1.Subject();\n    destination.next(newWindow);\n  };\n\n  return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber); //# sourceMappingURL=window.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/operators/window.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subject_1","require","OuterSubscriber_1","subscribeToResult_1","window","windowBoundaries","windowOperatorFunction","source","lift","WindowOperator","exports","call","subscriber","windowSubscriber","WindowSubscriber","sourceSubscription","subscribe","closed","add","subscribeToResult","_super","destination","Subject","next","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","openWindow","notifyError","error","_error","notifyComplete","_complete","_next","value","err","complete","_unsubscribe","prevWindow","newWindow","OuterSubscriber"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nexports.window = window;\nvar WindowOperator = (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        _super.call(this, destination);\n        this.window = new Subject_1.Subject();\n        destination.next(this.window);\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    /** @deprecated internal use only */ WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject_1.Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=window.js.map"]},"metadata":{},"sourceType":"script"}