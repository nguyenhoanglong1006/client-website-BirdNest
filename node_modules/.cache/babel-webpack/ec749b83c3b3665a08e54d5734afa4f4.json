{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar Observable_1 = require('../Observable');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\n\n\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n  if (subscriptionDelay) {\n    return function (source) {\n      return new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));\n    };\n  }\n\n  return function (source) {\n    return source.lift(new DelayWhenOperator(delayDurationSelector));\n  };\n}\n\nexports.delayWhen = delayWhen;\n\nvar DelayWhenOperator = function () {\n  function DelayWhenOperator(delayDurationSelector) {\n    this.delayDurationSelector = delayDurationSelector;\n  }\n\n  DelayWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  };\n\n  return DelayWhenOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar DelayWhenSubscriber = function (_super) {\n  __extends(DelayWhenSubscriber, _super);\n\n  function DelayWhenSubscriber(destination, delayDurationSelector) {\n    _super.call(this, destination);\n\n    this.delayDurationSelector = delayDurationSelector;\n    this.completed = false;\n    this.delayNotifierSubscriptions = [];\n    this.values = [];\n  }\n\n  DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  };\n\n  DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n    this._error(error);\n  };\n\n  DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n    var value = this.removeSubscription(innerSub);\n\n    if (value) {\n      this.destination.next(value);\n    }\n\n    this.tryComplete();\n  };\n\n  DelayWhenSubscriber.prototype._next = function (value) {\n    try {\n      var delayNotifier = this.delayDurationSelector(value);\n\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n\n  DelayWhenSubscriber.prototype._complete = function () {\n    this.completed = true;\n    this.tryComplete();\n  };\n\n  DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n    subscription.unsubscribe();\n    var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    var value = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  };\n\n  DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n    var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  };\n\n  DelayWhenSubscriber.prototype.tryComplete = function () {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  };\n\n  return DelayWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar SubscriptionDelayObservable = function (_super) {\n  __extends(SubscriptionDelayObservable, _super);\n\n  function SubscriptionDelayObservable(\n  /** @deprecated internal use only */\n  source, subscriptionDelay) {\n    _super.call(this);\n\n    this.source = source;\n    this.subscriptionDelay = subscriptionDelay;\n  }\n  /** @deprecated internal use only */\n\n\n  SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  };\n\n  return SubscriptionDelayObservable;\n}(Observable_1.Observable);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar SubscriptionDelaySubscriber = function (_super) {\n  __extends(SubscriptionDelaySubscriber, _super);\n\n  function SubscriptionDelaySubscriber(parent, source) {\n    _super.call(this);\n\n    this.parent = parent;\n    this.source = source;\n    this.sourceSubscribed = false;\n  }\n\n  SubscriptionDelaySubscriber.prototype._next = function (unused) {\n    this.subscribeToSource();\n  };\n\n  SubscriptionDelaySubscriber.prototype._error = function (err) {\n    this.unsubscribe();\n    this.parent.error(err);\n  };\n\n  SubscriptionDelaySubscriber.prototype._complete = function () {\n    this.subscribeToSource();\n  };\n\n  SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  };\n\n  return SubscriptionDelaySubscriber;\n}(Subscriber_1.Subscriber); //# sourceMappingURL=delayWhen.js.map","map":{"version":3,"sources":["/Users/nguyenlong/ProjectCompany/2nMart/websiteclient-2nmart.vn/node_modules/ng5-slider/node_modules/rxjs/operators/delayWhen.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","Observable_1","OuterSubscriber_1","subscribeToResult_1","delayWhen","delayDurationSelector","subscriptionDelay","source","SubscriptionDelayObservable","lift","DelayWhenOperator","exports","call","subscriber","subscribe","DelayWhenSubscriber","_super","destination","completed","delayNotifierSubscriptions","values","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","next","removeSubscription","tryComplete","notifyError","error","_error","notifyComplete","value","_next","delayNotifier","tryDelay","err","_complete","subscription","unsubscribe","subscriptionIdx","indexOf","splice","notifierSubscription","subscribeToResult","closed","add","push","length","complete","OuterSubscriber","_subscribe","SubscriptionDelaySubscriber","Observable","parent","sourceSubscribed","unused","subscribeToSource","Subscriber"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxD,OAAK,IAAIC,CAAT,IAAcD,CAAd,EAAiB,IAAIA,CAAC,CAACE,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBF,CAAC,CAACE,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAR;;AAC1C,WAASE,EAAT,GAAc;AAAE,SAAKC,WAAL,GAAmBL,CAAnB;AAAuB;;AACvCA,EAAAA,CAAC,CAACM,SAAF,GAAcL,CAAC,KAAK,IAAN,GAAaM,MAAM,CAACC,MAAP,CAAcP,CAAd,CAAb,IAAiCG,EAAE,CAACE,SAAH,GAAeL,CAAC,CAACK,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,CAJD;;AAKA,IAAIK,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,oBAAD,CAA/B;;AACA,IAAIG,mBAAmB,GAAGH,OAAO,CAAC,2BAAD,CAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,SAAT,CAAmBC,qBAAnB,EAA0CC,iBAA1C,EAA6D;AACzD,MAAIA,iBAAJ,EAAuB;AACnB,WAAO,UAAUC,MAAV,EAAkB;AACrB,aAAO,IAAIC,2BAAJ,CAAgCD,MAAhC,EAAwCD,iBAAxC,EACFG,IADE,CACG,IAAIC,iBAAJ,CAAsBL,qBAAtB,CADH,CAAP;AAEH,KAHD;AAIH;;AACD,SAAO,UAAUE,MAAV,EAAkB;AAAE,WAAOA,MAAM,CAACE,IAAP,CAAY,IAAIC,iBAAJ,CAAsBL,qBAAtB,CAAZ,CAAP;AAAmE,GAA9F;AACH;;AACDM,OAAO,CAACP,SAAR,GAAoBA,SAApB;;AACA,IAAIM,iBAAiB,GAAI,YAAY;AACjC,WAASA,iBAAT,CAA2BL,qBAA3B,EAAkD;AAC9C,SAAKA,qBAAL,GAA6BA,qBAA7B;AACH;;AACDK,EAAAA,iBAAiB,CAACd,SAAlB,CAA4BgB,IAA5B,GAAmC,UAAUC,UAAV,EAAsBN,MAAtB,EAA8B;AAC7D,WAAOA,MAAM,CAACO,SAAP,CAAiB,IAAIC,mBAAJ,CAAwBF,UAAxB,EAAoC,KAAKR,qBAAzC,CAAjB,CAAP;AACH,GAFD;;AAGA,SAAOK,iBAAP;AACH,CARwB,EAAzB;AASA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,mBAAmB,GAAI,UAAUC,MAAV,EAAkB;AACzC3B,EAAAA,SAAS,CAAC0B,mBAAD,EAAsBC,MAAtB,CAAT;;AACA,WAASD,mBAAT,CAA6BE,WAA7B,EAA0CZ,qBAA1C,EAAiE;AAC7DW,IAAAA,MAAM,CAACJ,IAAP,CAAY,IAAZ,EAAkBK,WAAlB;;AACA,SAAKZ,qBAAL,GAA6BA,qBAA7B;AACA,SAAKa,SAAL,GAAiB,KAAjB;AACA,SAAKC,0BAAL,GAAkC,EAAlC;AACA,SAAKC,MAAL,GAAc,EAAd;AACH;;AACDL,EAAAA,mBAAmB,CAACnB,SAApB,CAA8ByB,UAA9B,GAA2C,UAAUC,UAAV,EAAsBC,UAAtB,EAAkCC,UAAlC,EAA8CC,UAA9C,EAA0DC,QAA1D,EAAoE;AAC3G,SAAKT,WAAL,CAAiBU,IAAjB,CAAsBL,UAAtB;AACA,SAAKM,kBAAL,CAAwBF,QAAxB;AACA,SAAKG,WAAL;AACH,GAJD;;AAKAd,EAAAA,mBAAmB,CAACnB,SAApB,CAA8BkC,WAA9B,GAA4C,UAAUC,KAAV,EAAiBL,QAAjB,EAA2B;AACnE,SAAKM,MAAL,CAAYD,KAAZ;AACH,GAFD;;AAGAhB,EAAAA,mBAAmB,CAACnB,SAApB,CAA8BqC,cAA9B,GAA+C,UAAUP,QAAV,EAAoB;AAC/D,QAAIQ,KAAK,GAAG,KAAKN,kBAAL,CAAwBF,QAAxB,CAAZ;;AACA,QAAIQ,KAAJ,EAAW;AACP,WAAKjB,WAAL,CAAiBU,IAAjB,CAAsBO,KAAtB;AACH;;AACD,SAAKL,WAAL;AACH,GAND;;AAOAd,EAAAA,mBAAmB,CAACnB,SAApB,CAA8BuC,KAA9B,GAAsC,UAAUD,KAAV,EAAiB;AACnD,QAAI;AACA,UAAIE,aAAa,GAAG,KAAK/B,qBAAL,CAA2B6B,KAA3B,CAApB;;AACA,UAAIE,aAAJ,EAAmB;AACf,aAAKC,QAAL,CAAcD,aAAd,EAA6BF,KAA7B;AACH;AACJ,KALD,CAMA,OAAOI,GAAP,EAAY;AACR,WAAKrB,WAAL,CAAiBc,KAAjB,CAAuBO,GAAvB;AACH;AACJ,GAVD;;AAWAvB,EAAAA,mBAAmB,CAACnB,SAApB,CAA8B2C,SAA9B,GAA0C,YAAY;AAClD,SAAKrB,SAAL,GAAiB,IAAjB;AACA,SAAKW,WAAL;AACH,GAHD;;AAIAd,EAAAA,mBAAmB,CAACnB,SAApB,CAA8BgC,kBAA9B,GAAmD,UAAUY,YAAV,EAAwB;AACvEA,IAAAA,YAAY,CAACC,WAAb;AACA,QAAIC,eAAe,GAAG,KAAKvB,0BAAL,CAAgCwB,OAAhC,CAAwCH,YAAxC,CAAtB;AACA,QAAIN,KAAK,GAAG,IAAZ;;AACA,QAAIQ,eAAe,KAAK,CAAC,CAAzB,EAA4B;AACxBR,MAAAA,KAAK,GAAG,KAAKd,MAAL,CAAYsB,eAAZ,CAAR;AACA,WAAKvB,0BAAL,CAAgCyB,MAAhC,CAAuCF,eAAvC,EAAwD,CAAxD;AACA,WAAKtB,MAAL,CAAYwB,MAAZ,CAAmBF,eAAnB,EAAoC,CAApC;AACH;;AACD,WAAOR,KAAP;AACH,GAVD;;AAWAnB,EAAAA,mBAAmB,CAACnB,SAApB,CAA8ByC,QAA9B,GAAyC,UAAUD,aAAV,EAAyBF,KAAzB,EAAgC;AACrE,QAAIW,oBAAoB,GAAG1C,mBAAmB,CAAC2C,iBAApB,CAAsC,IAAtC,EAA4CV,aAA5C,EAA2DF,KAA3D,CAA3B;;AACA,QAAIW,oBAAoB,IAAI,CAACA,oBAAoB,CAACE,MAAlD,EAA0D;AACtD,WAAKC,GAAL,CAASH,oBAAT;AACA,WAAK1B,0BAAL,CAAgC8B,IAAhC,CAAqCJ,oBAArC;AACH;;AACD,SAAKzB,MAAL,CAAY6B,IAAZ,CAAiBf,KAAjB;AACH,GAPD;;AAQAnB,EAAAA,mBAAmB,CAACnB,SAApB,CAA8BiC,WAA9B,GAA4C,YAAY;AACpD,QAAI,KAAKX,SAAL,IAAkB,KAAKC,0BAAL,CAAgC+B,MAAhC,KAA2C,CAAjE,EAAoE;AAChE,WAAKjC,WAAL,CAAiBkC,QAAjB;AACH;AACJ,GAJD;;AAKA,SAAOpC,mBAAP;AACH,CAhE0B,CAgEzBb,iBAAiB,CAACkD,eAhEO,CAA3B;AAiEA;AACA;AACA;AACA;AACA;;;AACA,IAAI5C,2BAA2B,GAAI,UAAUQ,MAAV,EAAkB;AACjD3B,EAAAA,SAAS,CAACmB,2BAAD,EAA8BQ,MAA9B,CAAT;;AACA,WAASR,2BAAT;AAAqC;AAAqCD,EAAAA,MAA1E,EAAkFD,iBAAlF,EAAqG;AACjGU,IAAAA,MAAM,CAACJ,IAAP,CAAY,IAAZ;;AACA,SAAKL,MAAL,GAAcA,MAAd;AACA,SAAKD,iBAAL,GAAyBA,iBAAzB;AACH;AACD;;;AAAqCE,EAAAA,2BAA2B,CAACZ,SAA5B,CAAsCyD,UAAtC,GAAmD,UAAUxC,UAAV,EAAsB;AAC1G,SAAKP,iBAAL,CAAuBQ,SAAvB,CAAiC,IAAIwC,2BAAJ,CAAgCzC,UAAhC,EAA4C,KAAKN,MAAjD,CAAjC;AACH,GAFoC;;AAGrC,SAAOC,2BAAP;AACH,CAXkC,CAWjCP,YAAY,CAACsD,UAXoB,CAAnC;AAYA;AACA;AACA;AACA;AACA;;;AACA,IAAID,2BAA2B,GAAI,UAAUtC,MAAV,EAAkB;AACjD3B,EAAAA,SAAS,CAACiE,2BAAD,EAA8BtC,MAA9B,CAAT;;AACA,WAASsC,2BAAT,CAAqCE,MAArC,EAA6CjD,MAA7C,EAAqD;AACjDS,IAAAA,MAAM,CAACJ,IAAP,CAAY,IAAZ;;AACA,SAAK4C,MAAL,GAAcA,MAAd;AACA,SAAKjD,MAAL,GAAcA,MAAd;AACA,SAAKkD,gBAAL,GAAwB,KAAxB;AACH;;AACDH,EAAAA,2BAA2B,CAAC1D,SAA5B,CAAsCuC,KAAtC,GAA8C,UAAUuB,MAAV,EAAkB;AAC5D,SAAKC,iBAAL;AACH,GAFD;;AAGAL,EAAAA,2BAA2B,CAAC1D,SAA5B,CAAsCoC,MAAtC,GAA+C,UAAUM,GAAV,EAAe;AAC1D,SAAKG,WAAL;AACA,SAAKe,MAAL,CAAYzB,KAAZ,CAAkBO,GAAlB;AACH,GAHD;;AAIAgB,EAAAA,2BAA2B,CAAC1D,SAA5B,CAAsC2C,SAAtC,GAAkD,YAAY;AAC1D,SAAKoB,iBAAL;AACH,GAFD;;AAGAL,EAAAA,2BAA2B,CAAC1D,SAA5B,CAAsC+D,iBAAtC,GAA0D,YAAY;AAClE,QAAI,CAAC,KAAKF,gBAAV,EAA4B;AACxB,WAAKA,gBAAL,GAAwB,IAAxB;AACA,WAAKhB,WAAL;AACA,WAAKlC,MAAL,CAAYO,SAAZ,CAAsB,KAAK0C,MAA3B;AACH;AACJ,GAND;;AAOA,SAAOF,2BAAP;AACH,CA1BkC,CA0BjCvD,YAAY,CAAC6D,UA1BoB,CAAnC,C,CA2BA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Observable_1 = require('../Observable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nexports.delayWhen = delayWhen;\nvar DelayWhenOperator = (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = (function (_super) {\n    __extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        _super.call(this, destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.values = [];\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = (function (_super) {\n    __extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(/** @deprecated internal use only */ source, subscriptionDelay) {\n        _super.call(this);\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    /** @deprecated internal use only */ SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable_1.Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = (function (_super) {\n    __extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        _super.call(this);\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=delayWhen.js.map"]},"metadata":{},"sourceType":"script"}