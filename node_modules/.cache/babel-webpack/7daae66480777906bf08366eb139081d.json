{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Observable_1 = require('../Observable');\n\nvar EmptyObservable_1 = require('./EmptyObservable');\n\nvar isArray_1 = require('../util/isArray');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar ForkJoinObservable = function (_super) {\n  __extends(ForkJoinObservable, _super);\n\n  function ForkJoinObservable(sources, resultSelector) {\n    _super.call(this);\n\n    this.sources = sources;\n    this.resultSelector = resultSelector;\n  }\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n\n\n  ForkJoinObservable.create = function () {\n    var sources = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      sources[_i - 0] = arguments[_i];\n    }\n\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable_1.EmptyObservable();\n    }\n\n    var resultSelector = null;\n\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = sources.pop();\n    } // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n\n\n    if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n      sources = sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable_1.EmptyObservable();\n    }\n\n    return new ForkJoinObservable(sources, resultSelector);\n  };\n  /** @deprecated internal use only */\n\n\n  ForkJoinObservable.prototype._subscribe = function (subscriber) {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  };\n\n  return ForkJoinObservable;\n}(Observable_1.Observable);\n\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar ForkJoinSubscriber = function (_super) {\n  __extends(ForkJoinSubscriber, _super);\n\n  function ForkJoinSubscriber(destination, sources, resultSelector) {\n    _super.call(this, destination);\n\n    this.sources = sources;\n    this.resultSelector = resultSelector;\n    this.completed = 0;\n    this.haveValues = 0;\n    var len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var source = sources[i];\n      var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        innerSubscription.outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.values[outerIndex] = innerValue;\n\n    if (!innerSub._hasValue) {\n      innerSub._hasValue = true;\n      this.haveValues++;\n    }\n  };\n\n  ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n    var destination = this.destination;\n\n    var _a = this,\n        haveValues = _a.haveValues,\n        resultSelector = _a.resultSelector,\n        values = _a.values;\n\n    var len = values.length;\n\n    if (!innerSub._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      var value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  };\n\n  return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber); //# sourceMappingURL=ForkJoinObservable.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/observable/ForkJoinObservable.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Observable_1","require","EmptyObservable_1","isArray_1","subscribeToResult_1","OuterSubscriber_1","ForkJoinObservable","_super","sources","resultSelector","call","_i","arguments","length","EmptyObservable","pop","isArray","_subscribe","subscriber","ForkJoinSubscriber","Observable","exports","destination","completed","haveValues","len","total","values","Array","i","source","innerSubscription","subscribeToResult","outerIndex","add","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","_a","complete","value","apply","next","OuterSubscriber"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isArray_1 = require('../util/isArray');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ForkJoinObservable = (function (_super) {\n    __extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        _super.call(this);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Joins last values emitted by passed Observables.\n     *\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n     *\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\n     *\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\n     * immediately.\n     *\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n     * or {@link zip} instead.\n     *\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n     * and it will not emit anything either, even if it already has some last values from other Observables.\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n     * unless at any point some other Observable completes without emitting value, which brings us back to\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n     * have to emit something at least once and complete.\n     *\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n     * will be immediately unsubscribed.\n     *\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\n     * would land in emitted array. Whatever is returned by project function, will appear in output\n     * Observable instead. This means that default project can be thought of as a function that takes\n     * all its arguments and puts them into an array. Note that project function will be called only\n     * when output Observable is supposed to emit a result.\n     *\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.of(1, 2, 3, 4),\n     *   Rx.Observable.of(5, 6, 7, 8)\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [4, 8]\n     * // \"This is how it ends!\"\n     *\n     *\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [2, 3] after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     *\n     * @example <caption>Use forkJoin with project function</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n     *   (n, m) => n + m\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // 5 after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     * @see {@link combineLatest}\n     * @see {@link zip}\n     *\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n     * passed directly to the operator.\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\n     * that will appear in resulting Observable instead of default array.\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n     * or value from project function.\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i - 0] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    /** @deprecated internal use only */ ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable_1.Observable));\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = (function (_super) {\n    __extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        _super.call(this, destination);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n        this.completed = 0;\n        this.haveValues = 0;\n        var len = sources.length;\n        this.total = len;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                this.add(innerSubscription);\n            }\n        }\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=ForkJoinObservable.js.map"]},"metadata":{},"sourceType":"script"}