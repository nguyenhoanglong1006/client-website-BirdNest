{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar tryCatch_1 = require('../util/tryCatch');\n\nvar errorObject_1 = require('../util/errorObject');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\n\n\nfunction audit(durationSelector) {\n  return function auditOperatorFunction(source) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nexports.audit = audit;\n\nvar AuditOperator = function () {\n  function AuditOperator(durationSelector) {\n    this.durationSelector = durationSelector;\n  }\n\n  AuditOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n  };\n\n  return AuditOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar AuditSubscriber = function (_super) {\n  __extends(AuditSubscriber, _super);\n\n  function AuditSubscriber(destination, durationSelector) {\n    _super.call(this, destination);\n\n    this.durationSelector = durationSelector;\n    this.hasValue = false;\n  }\n\n  AuditSubscriber.prototype._next = function (value) {\n    this.value = value;\n    this.hasValue = true;\n\n    if (!this.throttled) {\n      var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n\n      if (duration === errorObject_1.errorObject) {\n        this.destination.error(errorObject_1.errorObject.e);\n      } else {\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);\n\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  };\n\n  AuditSubscriber.prototype.clearThrottle = function () {\n    var _a = this,\n        value = _a.value,\n        hasValue = _a.hasValue,\n        throttled = _a.throttled;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  };\n\n  AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n    this.clearThrottle();\n  };\n\n  AuditSubscriber.prototype.notifyComplete = function () {\n    this.clearThrottle();\n  };\n\n  return AuditSubscriber;\n}(OuterSubscriber_1.OuterSubscriber); //# sourceMappingURL=audit.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/operators/audit.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","tryCatch_1","require","errorObject_1","OuterSubscriber_1","subscribeToResult_1","audit","durationSelector","auditOperatorFunction","source","lift","AuditOperator","exports","call","subscriber","subscribe","AuditSubscriber","_super","destination","hasValue","_next","value","throttled","duration","tryCatch","errorObject","error","e","innerSubscription","subscribeToResult","closed","clearThrottle","add","_a","remove","unsubscribe","next","notifyNext","outerValue","innerValue","outerIndex","innerIndex","notifyComplete","OuterSubscriber"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nexports.audit = audit;\nvar AuditOperator = (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = (function (_super) {\n    __extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n            if (duration === errorObject_1.errorObject) {\n                this.destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);\n                if (innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=audit.js.map"]},"metadata":{},"sourceType":"script"}