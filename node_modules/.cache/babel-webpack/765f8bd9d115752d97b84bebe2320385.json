{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar isFunction_1 = require('../util/isFunction');\n\nvar Observable_1 = require('../Observable');\n\nvar Subscription_1 = require('../Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar FromEventPatternObservable = function (_super) {\n  __extends(FromEventPatternObservable, _super);\n\n  function FromEventPatternObservable(addHandler, removeHandler, selector) {\n    _super.call(this);\n\n    this.addHandler = addHandler;\n    this.removeHandler = removeHandler;\n    this.selector = selector;\n  }\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n\n\n  FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  };\n  /** @deprecated internal use only */\n\n\n  FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n    var _this = this;\n\n    var removeHandler = this.removeHandler;\n    var handler = !!this.selector ? function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n      }\n\n      _this._callSelector(subscriber, args);\n    } : function (e) {\n      subscriber.next(e);\n    };\n\n    var retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction_1.isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription_1.Subscription(function () {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue);\n    }));\n  };\n\n  FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n    try {\n      var result = this.selector.apply(this, args);\n      subscriber.next(result);\n    } catch (e) {\n      subscriber.error(e);\n    }\n  };\n\n  FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n    try {\n      return this.addHandler(handler) || null;\n    } catch (e) {\n      errorSubscriber.error(e);\n    }\n  };\n\n  return FromEventPatternObservable;\n}(Observable_1.Observable);\n\nexports.FromEventPatternObservable = FromEventPatternObservable; //# sourceMappingURL=FromEventPatternObservable.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/observable/FromEventPatternObservable.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","isFunction_1","require","Observable_1","Subscription_1","FromEventPatternObservable","_super","addHandler","removeHandler","selector","call","_subscribe","subscriber","_this","handler","args","_i","arguments","length","_callSelector","e","next","retValue","_callAddHandler","isFunction","add","Subscription","result","apply","error","errorSubscriber","Observable","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('../util/isFunction');\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventPatternObservable = (function (_super) {\n    __extends(FromEventPatternObservable, _super);\n    function FromEventPatternObservable(addHandler, removeHandler, selector) {\n        _super.call(this);\n        this.addHandler = addHandler;\n        this.removeHandler = removeHandler;\n        this.selector = selector;\n    }\n    /**\n     * Creates an Observable from an API based on addHandler/removeHandler\n     * functions.\n     *\n     * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n     * Observable.</span>\n     *\n     * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n     *\n     * Creates an Observable by using the `addHandler` and `removeHandler`\n     * functions to add and remove the handlers, with an optional selector\n     * function to project the event arguments to a result. The `addHandler` is\n     * called when the output Observable is subscribed, and `removeHandler` is\n     * called when the Subscription is unsubscribed.\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * function addClickHandler(handler) {\n     *   document.addEventListener('click', handler);\n     * }\n     *\n     * function removeClickHandler(handler) {\n     *   document.removeEventListener('click', handler);\n     * }\n     *\n     * var clicks = Rx.Observable.fromEventPattern(\n     *   addClickHandler,\n     *   removeClickHandler\n     * );\n     * clicks.subscribe(x => console.log(x));\n     *\n     * @see {@link from}\n     * @see {@link fromEvent}\n     *\n     * @param {function(handler: Function): any} addHandler A function that takes\n     * a `handler` function as argument and attaches it somehow to the actual\n     * source of events.\n     * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n     * takes a `handler` function as argument and removes it in case it was\n     * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n     * removeHandler function will forward it.\n     * @param {function(...args: any): T} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEventPattern\n     * @owner Observable\n     */\n    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n    };\n    /** @deprecated internal use only */ FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var removeHandler = this.removeHandler;\n        var handler = !!this.selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            _this._callSelector(subscriber, args);\n        } : function (e) { subscriber.next(e); };\n        var retValue = this._callAddHandler(handler, subscriber);\n        if (!isFunction_1.isFunction(removeHandler)) {\n            return;\n        }\n        subscriber.add(new Subscription_1.Subscription(function () {\n            //TODO: determine whether or not to forward to error handler\n            removeHandler(handler, retValue);\n        }));\n    };\n    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n        try {\n            var result = this.selector.apply(this, args);\n            subscriber.next(result);\n        }\n        catch (e) {\n            subscriber.error(e);\n        }\n    };\n    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n        try {\n            return this.addHandler(handler) || null;\n        }\n        catch (e) {\n            errorSubscriber.error(e);\n        }\n    };\n    return FromEventPatternObservable;\n}(Observable_1.Observable));\nexports.FromEventPatternObservable = FromEventPatternObservable;\n//# sourceMappingURL=FromEventPatternObservable.js.map"]},"metadata":{},"sourceType":"script"}