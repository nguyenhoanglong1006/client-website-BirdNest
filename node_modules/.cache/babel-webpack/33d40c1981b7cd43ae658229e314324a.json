{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Observable_1 = require('../Observable');\n\nvar Notification_1 = require('../Notification');\n\nvar ColdObservable_1 = require('./ColdObservable');\n\nvar HotObservable_1 = require('./HotObservable');\n\nvar SubscriptionLog_1 = require('./SubscriptionLog');\n\nvar VirtualTimeScheduler_1 = require('../scheduler/VirtualTimeScheduler');\n\nvar defaultMaxFrame = 750;\n\nvar TestScheduler = function (_super) {\n  __extends(TestScheduler, _super);\n\n  function TestScheduler(assertDeepEqual) {\n    _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);\n\n    this.assertDeepEqual = assertDeepEqual;\n    this.hotObservables = [];\n    this.coldObservables = [];\n    this.flushTests = [];\n  }\n\n  TestScheduler.prototype.createTime = function (marbles) {\n    var indexOf = marbles.indexOf('|');\n\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n\n    return indexOf * TestScheduler.frameTimeFactor;\n  };\n\n  TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n\n    var messages = TestScheduler.parseMarbles(marbles, values, error);\n    var cold = new ColdObservable_1.ColdObservable(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  };\n\n  TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n\n    var messages = TestScheduler.parseMarbles(marbles, values, error);\n    var subject = new HotObservable_1.HotObservable(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  };\n\n  TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n    var _this = this;\n\n    var messages = [];\n    observable.subscribe(function (value) {\n      messages.push({\n        frame: _this.frame - outerFrame,\n        notification: Notification_1.Notification.createNext(value)\n      });\n    }, function (err) {\n      messages.push({\n        frame: _this.frame - outerFrame,\n        notification: Notification_1.Notification.createError(err)\n      });\n    }, function () {\n      messages.push({\n        frame: _this.frame - outerFrame,\n        notification: Notification_1.Notification.createComplete()\n      });\n    });\n    return messages;\n  };\n\n  TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {\n    var _this = this;\n\n    if (unsubscriptionMarbles === void 0) {\n      unsubscriptionMarbles = null;\n    }\n\n    var actual = [];\n    var flushTest = {\n      actual: actual,\n      ready: false\n    };\n    var unsubscriptionFrame = TestScheduler.parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    var subscription;\n    this.schedule(function () {\n      subscription = observable.subscribe(function (x) {\n        var value = x; // Support Observable-of-Observables\n\n        if (x instanceof Observable_1.Observable) {\n          value = _this.materializeInnerObservable(value, _this.frame);\n        }\n\n        actual.push({\n          frame: _this.frame,\n          notification: Notification_1.Notification.createNext(value)\n        });\n      }, function (err) {\n        actual.push({\n          frame: _this.frame,\n          notification: Notification_1.Notification.createError(err)\n        });\n      }, function () {\n        actual.push({\n          frame: _this.frame,\n          notification: Notification_1.Notification.createComplete()\n        });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(function () {\n        return subscription.unsubscribe();\n      }, unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n    return {\n      toBe: function toBe(marbles, values, errorValue) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  };\n\n  TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n    var flushTest = {\n      actual: actualSubscriptionLogs,\n      ready: false\n    };\n    this.flushTests.push(flushTest);\n    return {\n      toBe: function toBe(marbles) {\n        var marblesArray = typeof marbles === 'string' ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(function (marbles) {\n          return TestScheduler.parseMarblesAsSubscriptions(marbles);\n        });\n      }\n    };\n  };\n\n  TestScheduler.prototype.flush = function () {\n    var hotObservables = this.hotObservables;\n\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    _super.prototype.flush.call(this);\n\n    var readyFlushTests = this.flushTests.filter(function (test) {\n      return test.ready;\n    });\n\n    while (readyFlushTests.length > 0) {\n      var test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  };\n\n  TestScheduler.parseMarblesAsSubscriptions = function (marbles) {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n\n    var len = marbles.length;\n    var groupStart = -1;\n    var subscriptionFrame = Number.POSITIVE_INFINITY;\n    var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (var i = 0; i < len; i++) {\n      var frame = i * this.frameTimeFactor;\n      var c = marbles[i];\n\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n\n        case '(':\n          groupStart = frame;\n          break;\n\n        case ')':\n          groupStart = -1;\n          break;\n\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' + 'subscription marble diagram. There can only be one.');\n          }\n\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' + 'subscription marble diagram. There can only be one.');\n          }\n\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' + 'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  };\n\n  TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {\n    if (materializeInnerObservables === void 0) {\n      materializeInnerObservables = false;\n    }\n\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' + 'unsubscription marker \"!\"');\n    }\n\n    var len = marbles.length;\n    var testMessages = [];\n    var subIndex = marbles.indexOf('^');\n    var frameOffset = subIndex === -1 ? 0 : subIndex * -this.frameTimeFactor;\n    var getValue = typeof values !== 'object' ? function (x) {\n      return x;\n    } : function (x) {\n      // Support Observable-of-Observables\n      if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n        return values[x].messages;\n      }\n\n      return values[x];\n    };\n    var groupStart = -1;\n\n    for (var i = 0; i < len; i++) {\n      var frame = i * this.frameTimeFactor + frameOffset;\n      var notification = void 0;\n      var c = marbles[i];\n\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n\n        case '(':\n          groupStart = frame;\n          break;\n\n        case ')':\n          groupStart = -1;\n          break;\n\n        case '|':\n          notification = Notification_1.Notification.createComplete();\n          break;\n\n        case '^':\n          break;\n\n        case '#':\n          notification = Notification_1.Notification.createError(errorValue || 'error');\n          break;\n\n        default:\n          notification = Notification_1.Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({\n          frame: groupStart > -1 ? groupStart : frame,\n          notification: notification\n        });\n      }\n    }\n\n    return testMessages;\n  };\n\n  return TestScheduler;\n}(VirtualTimeScheduler_1.VirtualTimeScheduler);\n\nexports.TestScheduler = TestScheduler; //# sourceMappingURL=TestScheduler.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/testing/TestScheduler.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Observable_1","require","Notification_1","ColdObservable_1","HotObservable_1","SubscriptionLog_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","_super","assertDeepEqual","call","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","indexOf","Error","frameTimeFactor","createColdObservable","values","error","messages","parseMarbles","cold","ColdObservable","push","createHotObservable","subject","HotObservable","materializeInnerObservable","observable","outerFrame","_this","subscribe","value","frame","notification","Notification","createNext","err","createError","createComplete","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","unsubscribedFrame","subscription","schedule","x","Observable","Number","POSITIVE_INFINITY","unsubscribe","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","map","flush","length","shift","setup","readyFlushTests","filter","test","SubscriptionLog","len","groupStart","subscriptionFrame","i","c","materializeInnerObservables","testMessages","subIndex","frameOffset","getValue","VirtualTimeScheduler","exports"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxD,OAAK,IAAIC,CAAT,IAAcD,CAAd,EAAiB,IAAIA,CAAC,CAACE,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBF,CAAC,CAACE,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAR;;AAC1C,WAASE,EAAT,GAAc;AAAE,SAAKC,WAAL,GAAmBL,CAAnB;AAAuB;;AACvCA,EAAAA,CAAC,CAACM,SAAF,GAAcL,CAAC,KAAK,IAAN,GAAaM,MAAM,CAACC,MAAP,CAAcP,CAAd,CAAb,IAAiCG,EAAE,CAACE,SAAH,GAAeL,CAAC,CAACK,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,CAJD;;AAKA,IAAIK,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,iBAAD,CAA5B;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,kBAAD,CAA9B;;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,iBAAD,CAA7B;;AACA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,mBAAD,CAA/B;;AACA,IAAIK,sBAAsB,GAAGL,OAAO,CAAC,mCAAD,CAApC;;AACA,IAAIM,eAAe,GAAG,GAAtB;;AACA,IAAIC,aAAa,GAAI,UAAUC,MAAV,EAAkB;AACnCnB,EAAAA,SAAS,CAACkB,aAAD,EAAgBC,MAAhB,CAAT;;AACA,WAASD,aAAT,CAAuBE,eAAvB,EAAwC;AACpCD,IAAAA,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBL,sBAAsB,CAACM,aAAzC,EAAwDL,eAAxD;;AACA,SAAKG,eAAL,GAAuBA,eAAvB;AACA,SAAKG,cAAL,GAAsB,EAAtB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACH;;AACDP,EAAAA,aAAa,CAACX,SAAd,CAAwBmB,UAAxB,GAAqC,UAAUC,OAAV,EAAmB;AACpD,QAAIC,OAAO,GAAGD,OAAO,CAACC,OAAR,CAAgB,GAAhB,CAAd;;AACA,QAAIA,OAAO,KAAK,CAAC,CAAjB,EAAoB;AAChB,YAAM,IAAIC,KAAJ,CAAU,6DAAV,CAAN;AACH;;AACD,WAAOD,OAAO,GAAGV,aAAa,CAACY,eAA/B;AACH,GAND;;AAOAZ,EAAAA,aAAa,CAACX,SAAd,CAAwBwB,oBAAxB,GAA+C,UAAUJ,OAAV,EAAmBK,MAAnB,EAA2BC,KAA3B,EAAkC;AAC7E,QAAIN,OAAO,CAACC,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC;AAC7B,YAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACH;;AACD,QAAIF,OAAO,CAACC,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC;AAC7B,YAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;AACD,QAAIK,QAAQ,GAAGhB,aAAa,CAACiB,YAAd,CAA2BR,OAA3B,EAAoCK,MAApC,EAA4CC,KAA5C,CAAf;AACA,QAAIG,IAAI,GAAG,IAAIvB,gBAAgB,CAACwB,cAArB,CAAoCH,QAApC,EAA8C,IAA9C,CAAX;AACA,SAAKV,eAAL,CAAqBc,IAArB,CAA0BF,IAA1B;AACA,WAAOA,IAAP;AACH,GAXD;;AAYAlB,EAAAA,aAAa,CAACX,SAAd,CAAwBgC,mBAAxB,GAA8C,UAAUZ,OAAV,EAAmBK,MAAnB,EAA2BC,KAA3B,EAAkC;AAC5E,QAAIN,OAAO,CAACC,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC;AAC7B,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AACD,QAAIK,QAAQ,GAAGhB,aAAa,CAACiB,YAAd,CAA2BR,OAA3B,EAAoCK,MAApC,EAA4CC,KAA5C,CAAf;AACA,QAAIO,OAAO,GAAG,IAAI1B,eAAe,CAAC2B,aAApB,CAAkCP,QAAlC,EAA4C,IAA5C,CAAd;AACA,SAAKX,cAAL,CAAoBe,IAApB,CAAyBE,OAAzB;AACA,WAAOA,OAAP;AACH,GARD;;AASAtB,EAAAA,aAAa,CAACX,SAAd,CAAwBmC,0BAAxB,GAAqD,UAAUC,UAAV,EAAsBC,UAAtB,EAAkC;AACnF,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAIX,QAAQ,GAAG,EAAf;AACAS,IAAAA,UAAU,CAACG,SAAX,CAAqB,UAAUC,KAAV,EAAiB;AAClCb,MAAAA,QAAQ,CAACI,IAAT,CAAc;AAAEU,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAcJ,UAAvB;AAAmCK,QAAAA,YAAY,EAAErC,cAAc,CAACsC,YAAf,CAA4BC,UAA5B,CAAuCJ,KAAvC;AAAjD,OAAd;AACH,KAFD,EAEG,UAAUK,GAAV,EAAe;AACdlB,MAAAA,QAAQ,CAACI,IAAT,CAAc;AAAEU,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAcJ,UAAvB;AAAmCK,QAAAA,YAAY,EAAErC,cAAc,CAACsC,YAAf,CAA4BG,WAA5B,CAAwCD,GAAxC;AAAjD,OAAd;AACH,KAJD,EAIG,YAAY;AACXlB,MAAAA,QAAQ,CAACI,IAAT,CAAc;AAAEU,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAcJ,UAAvB;AAAmCK,QAAAA,YAAY,EAAErC,cAAc,CAACsC,YAAf,CAA4BI,cAA5B;AAAjD,OAAd;AACH,KAND;AAOA,WAAOpB,QAAP;AACH,GAXD;;AAYAhB,EAAAA,aAAa,CAACX,SAAd,CAAwBgD,gBAAxB,GAA2C,UAAUZ,UAAV,EAAsBa,qBAAtB,EAA6C;AACpF,QAAIX,KAAK,GAAG,IAAZ;;AACA,QAAIW,qBAAqB,KAAK,KAAK,CAAnC,EAAsC;AAAEA,MAAAA,qBAAqB,GAAG,IAAxB;AAA+B;;AACvE,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,SAAS,GAAG;AAAED,MAAAA,MAAM,EAAEA,MAAV;AAAkBE,MAAAA,KAAK,EAAE;AAAzB,KAAhB;AACA,QAAIC,mBAAmB,GAAG1C,aAAa,CAClC2C,2BADqB,CACOL,qBADP,EAC8BM,iBADxD;AAEA,QAAIC,YAAJ;AACA,SAAKC,QAAL,CAAc,YAAY;AACtBD,MAAAA,YAAY,GAAGpB,UAAU,CAACG,SAAX,CAAqB,UAAUmB,CAAV,EAAa;AAC7C,YAAIlB,KAAK,GAAGkB,CAAZ,CAD6C,CAE7C;;AACA,YAAIA,CAAC,YAAYvD,YAAY,CAACwD,UAA9B,EAA0C;AACtCnB,UAAAA,KAAK,GAAGF,KAAK,CAACH,0BAAN,CAAiCK,KAAjC,EAAwCF,KAAK,CAACG,KAA9C,CAAR;AACH;;AACDS,QAAAA,MAAM,CAACnB,IAAP,CAAY;AAAEU,UAAAA,KAAK,EAAEH,KAAK,CAACG,KAAf;AAAsBC,UAAAA,YAAY,EAAErC,cAAc,CAACsC,YAAf,CAA4BC,UAA5B,CAAuCJ,KAAvC;AAApC,SAAZ;AACH,OAPc,EAOZ,UAAUK,GAAV,EAAe;AACdK,QAAAA,MAAM,CAACnB,IAAP,CAAY;AAAEU,UAAAA,KAAK,EAAEH,KAAK,CAACG,KAAf;AAAsBC,UAAAA,YAAY,EAAErC,cAAc,CAACsC,YAAf,CAA4BG,WAA5B,CAAwCD,GAAxC;AAApC,SAAZ;AACH,OATc,EASZ,YAAY;AACXK,QAAAA,MAAM,CAACnB,IAAP,CAAY;AAAEU,UAAAA,KAAK,EAAEH,KAAK,CAACG,KAAf;AAAsBC,UAAAA,YAAY,EAAErC,cAAc,CAACsC,YAAf,CAA4BI,cAA5B;AAApC,SAAZ;AACH,OAXc,CAAf;AAYH,KAbD,EAaG,CAbH;;AAcA,QAAIM,mBAAmB,KAAKO,MAAM,CAACC,iBAAnC,EAAsD;AAClD,WAAKJ,QAAL,CAAc,YAAY;AAAE,eAAOD,YAAY,CAACM,WAAb,EAAP;AAAoC,OAAhE,EAAkET,mBAAlE;AACH;;AACD,SAAKnC,UAAL,CAAgBa,IAAhB,CAAqBoB,SAArB;AACA,WAAO;AACHY,MAAAA,IAAI,EAAE,SAANA,IAAM,CAAU3C,OAAV,EAAmBK,MAAnB,EAA2BuC,UAA3B,EAAuC;AACzCb,QAAAA,SAAS,CAACC,KAAV,GAAkB,IAAlB;AACAD,QAAAA,SAAS,CAACc,QAAV,GAAqBtD,aAAa,CAACiB,YAAd,CAA2BR,OAA3B,EAAoCK,MAApC,EAA4CuC,UAA5C,EAAwD,IAAxD,CAArB;AACH;AAJE,KAAP;AAMH,GAhCD;;AAiCArD,EAAAA,aAAa,CAACX,SAAd,CAAwBkE,mBAAxB,GAA8C,UAAUC,sBAAV,EAAkC;AAC5E,QAAIhB,SAAS,GAAG;AAAED,MAAAA,MAAM,EAAEiB,sBAAV;AAAkCf,MAAAA,KAAK,EAAE;AAAzC,KAAhB;AACA,SAAKlC,UAAL,CAAgBa,IAAhB,CAAqBoB,SAArB;AACA,WAAO;AACHY,MAAAA,IAAI,EAAE,SAANA,IAAM,CAAU3C,OAAV,EAAmB;AACrB,YAAIgD,YAAY,GAAI,OAAOhD,OAAP,KAAmB,QAApB,GAAgC,CAACA,OAAD,CAAhC,GAA4CA,OAA/D;AACA+B,QAAAA,SAAS,CAACC,KAAV,GAAkB,IAAlB;AACAD,QAAAA,SAAS,CAACc,QAAV,GAAqBG,YAAY,CAACC,GAAb,CAAiB,UAAUjD,OAAV,EAAmB;AACrD,iBAAOT,aAAa,CAAC2C,2BAAd,CAA0ClC,OAA1C,CAAP;AACH,SAFoB,CAArB;AAGH;AAPE,KAAP;AASH,GAZD;;AAaAT,EAAAA,aAAa,CAACX,SAAd,CAAwBsE,KAAxB,GAAgC,YAAY;AACxC,QAAItD,cAAc,GAAG,KAAKA,cAA1B;;AACA,WAAOA,cAAc,CAACuD,MAAf,GAAwB,CAA/B,EAAkC;AAC9BvD,MAAAA,cAAc,CAACwD,KAAf,GAAuBC,KAAvB;AACH;;AACD7D,IAAAA,MAAM,CAACZ,SAAP,CAAiBsE,KAAjB,CAAuBxD,IAAvB,CAA4B,IAA5B;;AACA,QAAI4D,eAAe,GAAG,KAAKxD,UAAL,CAAgByD,MAAhB,CAAuB,UAAUC,IAAV,EAAgB;AAAE,aAAOA,IAAI,CAACxB,KAAZ;AAAoB,KAA7D,CAAtB;;AACA,WAAOsB,eAAe,CAACH,MAAhB,GAAyB,CAAhC,EAAmC;AAC/B,UAAIK,IAAI,GAAGF,eAAe,CAACF,KAAhB,EAAX;AACA,WAAK3D,eAAL,CAAqB+D,IAAI,CAAC1B,MAA1B,EAAkC0B,IAAI,CAACX,QAAvC;AACH;AACJ,GAXD;;AAYAtD,EAAAA,aAAa,CAAC2C,2BAAd,GAA4C,UAAUlC,OAAV,EAAmB;AAC3D,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,aAAO,IAAIZ,iBAAiB,CAACqE,eAAtB,CAAsCjB,MAAM,CAACC,iBAA7C,CAAP;AACH;;AACD,QAAIiB,GAAG,GAAG1D,OAAO,CAACmD,MAAlB;AACA,QAAIQ,UAAU,GAAG,CAAC,CAAlB;AACA,QAAIC,iBAAiB,GAAGpB,MAAM,CAACC,iBAA/B;AACA,QAAIR,mBAAmB,GAAGO,MAAM,CAACC,iBAAjC;;AACA,SAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC1B,UAAIxC,KAAK,GAAGwC,CAAC,GAAG,KAAK1D,eAArB;AACA,UAAI2D,CAAC,GAAG9D,OAAO,CAAC6D,CAAD,CAAf;;AACA,cAAQC,CAAR;AACI,aAAK,GAAL;AACA,aAAK,GAAL;AACI;;AACJ,aAAK,GAAL;AACIH,UAAAA,UAAU,GAAGtC,KAAb;AACA;;AACJ,aAAK,GAAL;AACIsC,UAAAA,UAAU,GAAG,CAAC,CAAd;AACA;;AACJ,aAAK,GAAL;AACI,cAAIC,iBAAiB,KAAKpB,MAAM,CAACC,iBAAjC,EAAoD;AAChD,kBAAM,IAAIvC,KAAJ,CAAU,kDACZ,qDADE,CAAN;AAEH;;AACD0D,UAAAA,iBAAiB,GAAGD,UAAU,GAAG,CAAC,CAAd,GAAkBA,UAAlB,GAA+BtC,KAAnD;AACA;;AACJ,aAAK,GAAL;AACI,cAAIY,mBAAmB,KAAKO,MAAM,CAACC,iBAAnC,EAAsD;AAClD,kBAAM,IAAIvC,KAAJ,CAAU,kDACZ,qDADE,CAAN;AAEH;;AACD+B,UAAAA,mBAAmB,GAAG0B,UAAU,GAAG,CAAC,CAAd,GAAkBA,UAAlB,GAA+BtC,KAArD;AACA;;AACJ;AACI,gBAAM,IAAInB,KAAJ,CAAU,oDACZ,+CADY,GACsC4D,CADtC,GAC0C,KADpD,CAAN;AAzBR;AA4BH;;AACD,QAAI7B,mBAAmB,GAAG,CAA1B,EAA6B;AACzB,aAAO,IAAI7C,iBAAiB,CAACqE,eAAtB,CAAsCG,iBAAtC,CAAP;AACH,KAFD,MAGK;AACD,aAAO,IAAIxE,iBAAiB,CAACqE,eAAtB,CAAsCG,iBAAtC,EAAyD3B,mBAAzD,CAAP;AACH;AACJ,GA9CD;;AA+CA1C,EAAAA,aAAa,CAACiB,YAAd,GAA6B,UAAUR,OAAV,EAAmBK,MAAnB,EAA2BuC,UAA3B,EAAuCmB,2BAAvC,EAAoE;AAC7F,QAAIA,2BAA2B,KAAK,KAAK,CAAzC,EAA4C;AAAEA,MAAAA,2BAA2B,GAAG,KAA9B;AAAsC;;AACpF,QAAI/D,OAAO,CAACC,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC;AAC7B,YAAM,IAAIC,KAAJ,CAAU,kDACZ,2BADE,CAAN;AAEH;;AACD,QAAIwD,GAAG,GAAG1D,OAAO,CAACmD,MAAlB;AACA,QAAIa,YAAY,GAAG,EAAnB;AACA,QAAIC,QAAQ,GAAGjE,OAAO,CAACC,OAAR,CAAgB,GAAhB,CAAf;AACA,QAAIiE,WAAW,GAAGD,QAAQ,KAAK,CAAC,CAAd,GAAkB,CAAlB,GAAuBA,QAAQ,GAAG,CAAC,KAAK9D,eAA1D;AACA,QAAIgE,QAAQ,GAAG,OAAO9D,MAAP,KAAkB,QAAlB,GACX,UAAUiC,CAAV,EAAa;AAAE,aAAOA,CAAP;AAAW,KADf,GAEX,UAAUA,CAAV,EAAa;AACT;AACA,UAAIyB,2BAA2B,IAAI1D,MAAM,CAACiC,CAAD,CAAN,YAAqBpD,gBAAgB,CAACwB,cAAzE,EAAyF;AACrF,eAAOL,MAAM,CAACiC,CAAD,CAAN,CAAU/B,QAAjB;AACH;;AACD,aAAOF,MAAM,CAACiC,CAAD,CAAb;AACH,KARL;AASA,QAAIqB,UAAU,GAAG,CAAC,CAAlB;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC1B,UAAIxC,KAAK,GAAGwC,CAAC,GAAG,KAAK1D,eAAT,GAA2B+D,WAAvC;AACA,UAAI5C,YAAY,GAAG,KAAK,CAAxB;AACA,UAAIwC,CAAC,GAAG9D,OAAO,CAAC6D,CAAD,CAAf;;AACA,cAAQC,CAAR;AACI,aAAK,GAAL;AACA,aAAK,GAAL;AACI;;AACJ,aAAK,GAAL;AACIH,UAAAA,UAAU,GAAGtC,KAAb;AACA;;AACJ,aAAK,GAAL;AACIsC,UAAAA,UAAU,GAAG,CAAC,CAAd;AACA;;AACJ,aAAK,GAAL;AACIrC,UAAAA,YAAY,GAAGrC,cAAc,CAACsC,YAAf,CAA4BI,cAA5B,EAAf;AACA;;AACJ,aAAK,GAAL;AACI;;AACJ,aAAK,GAAL;AACIL,UAAAA,YAAY,GAAGrC,cAAc,CAACsC,YAAf,CAA4BG,WAA5B,CAAwCkB,UAAU,IAAI,OAAtD,CAAf;AACA;;AACJ;AACItB,UAAAA,YAAY,GAAGrC,cAAc,CAACsC,YAAf,CAA4BC,UAA5B,CAAuC2C,QAAQ,CAACL,CAAD,CAA/C,CAAf;AACA;AApBR;;AAsBA,UAAIxC,YAAJ,EAAkB;AACd0C,QAAAA,YAAY,CAACrD,IAAb,CAAkB;AAAEU,UAAAA,KAAK,EAAEsC,UAAU,GAAG,CAAC,CAAd,GAAkBA,UAAlB,GAA+BtC,KAAxC;AAA+CC,UAAAA,YAAY,EAAEA;AAA7D,SAAlB;AACH;AACJ;;AACD,WAAO0C,YAAP;AACH,GAnDD;;AAoDA,SAAOzE,aAAP;AACH,CA/MoB,CA+MnBF,sBAAsB,CAAC+E,oBA/MJ,CAArB;;AAgNAC,OAAO,CAAC9E,aAAR,GAAwBA,aAAxB,C,CACA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Notification_1 = require('../Notification');\nvar ColdObservable_1 = require('./ColdObservable');\nvar HotObservable_1 = require('./HotObservable');\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar VirtualTimeScheduler_1 = require('../scheduler/VirtualTimeScheduler');\nvar defaultMaxFrame = 750;\nvar TestScheduler = (function (_super) {\n    __extends(TestScheduler, _super);\n    function TestScheduler(assertDeepEqual) {\n        _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);\n        this.assertDeepEqual = assertDeepEqual;\n        this.hotObservables = [];\n        this.coldObservables = [];\n        this.flushTests = [];\n    }\n    TestScheduler.prototype.createTime = function (marbles) {\n        var indexOf = marbles.indexOf('|');\n        if (indexOf === -1) {\n            throw new Error('marble diagram for time should have a completion marker \"|\"');\n        }\n        return indexOf * TestScheduler.frameTimeFactor;\n    };\n    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var cold = new ColdObservable_1.ColdObservable(messages, this);\n        this.coldObservables.push(cold);\n        return cold;\n    };\n    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var subject = new HotObservable_1.HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    };\n    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n        var _this = this;\n        var messages = [];\n        observable.subscribe(function (value) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });\n        }, function (err) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n        }, function () {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n        });\n        return messages;\n    };\n    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {\n        var _this = this;\n        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }\n        var actual = [];\n        var flushTest = { actual: actual, ready: false };\n        var unsubscriptionFrame = TestScheduler\n            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n        var subscription;\n        this.schedule(function () {\n            subscription = observable.subscribe(function (x) {\n                var value = x;\n                // Support Observable-of-Observables\n                if (x instanceof Observable_1.Observable) {\n                    value = _this.materializeInnerObservable(value, _this.frame);\n                }\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });\n            }, function (err) {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n            }, function () {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n            });\n        }, 0);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n            }\n        };\n    };\n    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles) {\n                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(function (marbles) {\n                    return TestScheduler.parseMarblesAsSubscriptions(marbles);\n                });\n            }\n        };\n    };\n    TestScheduler.prototype.flush = function () {\n        var hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        _super.prototype.flush.call(this);\n        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });\n        while (readyFlushTests.length > 0) {\n            var test = readyFlushTests.shift();\n            this.assertDeepEqual(test.actual, test.expected);\n        }\n    };\n    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        var len = marbles.length;\n        var groupStart = -1;\n        var subscriptionFrame = Number.POSITIVE_INFINITY;\n        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    };\n    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {\n        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        var len = marbles.length;\n        var testMessages = [];\n        var subIndex = marbles.indexOf('^');\n        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        var getValue = typeof values !== 'object' ?\n            function (x) { return x; } :\n            function (x) {\n                // Support Observable-of-Observables\n                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        var groupStart = -1;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor + frameOffset;\n            var notification = void 0;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '|':\n                    notification = Notification_1.Notification.createComplete();\n                    break;\n                case '^':\n                    break;\n                case '#':\n                    notification = Notification_1.Notification.createError(errorValue || 'error');\n                    break;\n                default:\n                    notification = Notification_1.Notification.createNext(getValue(c));\n                    break;\n            }\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n            }\n        }\n        return testMessages;\n    };\n    return TestScheduler;\n}(VirtualTimeScheduler_1.VirtualTimeScheduler));\nexports.TestScheduler = TestScheduler;\n//# sourceMappingURL=TestScheduler.js.map"]},"metadata":{},"sourceType":"script"}