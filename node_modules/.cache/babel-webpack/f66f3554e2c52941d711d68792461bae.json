{"ast":null,"code":"\"use strict\";\n\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\n\nvar ScalarObservable_1 = require('../observable/ScalarObservable');\n\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n\nvar concat_1 = require('../observable/concat');\n\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\n\n\nfunction startWith() {\n  var array = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    array[_i - 0] = arguments[_i];\n  }\n\n  return function (source) {\n    var scheduler = array[array.length - 1];\n\n    if (isScheduler_1.isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    var len = array.length;\n\n    if (len === 1) {\n      return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);\n    } else if (len > 1) {\n      return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);\n    } else {\n      return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);\n    }\n  };\n}\n\nexports.startWith = startWith; //# sourceMappingURL=startWith.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/operators/startWith.js"],"names":["ArrayObservable_1","require","ScalarObservable_1","EmptyObservable_1","concat_1","isScheduler_1","startWith","array","_i","arguments","length","source","scheduler","isScheduler","pop","len","concat","ScalarObservable","ArrayObservable","EmptyObservable","exports"],"mappings":"AAAA;;AACA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,+BAAD,CAA/B;;AACA,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,gCAAD,CAAhC;;AACA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,+BAAD,CAA/B;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,sBAAD,CAAtB;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,qBAAD,CAA3B;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,SAAT,GAAqB;AACjB,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,KAAK,CAACC,EAAE,GAAG,CAAN,CAAL,GAAgBC,SAAS,CAACD,EAAD,CAAzB;AACH;;AACD,SAAO,UAAUG,MAAV,EAAkB;AACrB,QAAIC,SAAS,GAAGL,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAArB;;AACA,QAAIL,aAAa,CAACQ,WAAd,CAA0BD,SAA1B,CAAJ,EAA0C;AACtCL,MAAAA,KAAK,CAACO,GAAN;AACH,KAFD,MAGK;AACDF,MAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,QAAIG,GAAG,GAAGR,KAAK,CAACG,MAAhB;;AACA,QAAIK,GAAG,KAAK,CAAZ,EAAe;AACX,aAAOX,QAAQ,CAACY,MAAT,CAAgB,IAAId,kBAAkB,CAACe,gBAAvB,CAAwCV,KAAK,CAAC,CAAD,CAA7C,EAAkDK,SAAlD,CAAhB,EAA8ED,MAA9E,CAAP;AACH,KAFD,MAGK,IAAII,GAAG,GAAG,CAAV,EAAa;AACd,aAAOX,QAAQ,CAACY,MAAT,CAAgB,IAAIhB,iBAAiB,CAACkB,eAAtB,CAAsCX,KAAtC,EAA6CK,SAA7C,CAAhB,EAAyED,MAAzE,CAAP;AACH,KAFI,MAGA;AACD,aAAOP,QAAQ,CAACY,MAAT,CAAgB,IAAIb,iBAAiB,CAACgB,eAAtB,CAAsCP,SAAtC,CAAhB,EAAkED,MAAlE,CAAP;AACH;AACJ,GAlBD;AAmBH;;AACDS,OAAO,CAACd,SAAR,GAAoBA,SAApB,C,CACA","sourcesContent":["\"use strict\";\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar ScalarObservable_1 = require('../observable/ScalarObservable');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\nvar concat_1 = require('../observable/concat');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);\n        }\n        else if (len > 1) {\n            return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);\n        }\n        else {\n            return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);\n        }\n    };\n}\nexports.startWith = startWith;\n//# sourceMappingURL=startWith.js.map"]},"metadata":{},"sourceType":"script"}