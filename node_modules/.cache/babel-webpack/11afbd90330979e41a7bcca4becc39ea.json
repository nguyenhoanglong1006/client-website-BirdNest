{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar RangeObservable = function (_super) {\n  __extends(RangeObservable, _super);\n\n  function RangeObservable(start, count, scheduler) {\n    _super.call(this);\n\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n\n\n  RangeObservable.create = function (start, count, scheduler) {\n    if (start === void 0) {\n      start = 0;\n    }\n\n    if (count === void 0) {\n      count = 0;\n    }\n\n    return new RangeObservable(start, count, scheduler);\n  };\n\n  RangeObservable.dispatch = function (state) {\n    var start = state.start,\n        index = state.index,\n        count = state.count,\n        subscriber = state.subscriber;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n    this.schedule(state);\n  };\n  /** @deprecated internal use only */\n\n\n  RangeObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n    var start = this.start;\n    var count = this._count;\n    var scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index: index,\n        count: count,\n        start: start,\n        subscriber: subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n\n        subscriber.next(start++);\n\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  };\n\n  return RangeObservable;\n}(Observable_1.Observable);\n\nexports.RangeObservable = RangeObservable; //# sourceMappingURL=RangeObservable.js.map","map":{"version":3,"sources":["/Users/nguyenlong/ProjectCompany/2nMart/websiteclient-2nmart.vn/node_modules/ng5-slider/node_modules/rxjs/observable/RangeObservable.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Observable_1","require","RangeObservable","_super","start","count","scheduler","call","_count","dispatch","state","index","subscriber","complete","next","closed","schedule","_subscribe","Observable","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar RangeObservable = (function (_super) {\n    __extends(RangeObservable, _super);\n    function RangeObservable(start, count, scheduler) {\n        _super.call(this);\n        this.start = start;\n        this._count = count;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits a sequence of numbers within a specified\n     * range.\n     *\n     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n     *\n     * <img src=\"./img/range.png\" width=\"100%\">\n     *\n     * `range` operator emits a range of sequential integers, in order, where you\n     * select the `start` of the range and its `length`. By default, uses no\n     * IScheduler and just delivers the notifications synchronously, but may use\n     * an optional IScheduler to regulate those deliveries.\n     *\n     * @example <caption>Emits the numbers 1 to 10</caption>\n     * var numbers = Rx.Observable.range(1, 10);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link interval}\n     *\n     * @param {number} [start=0] The value of the first integer in the sequence.\n     * @param {number} [count=0] The number of sequential integers to generate.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the notifications.\n     * @return {Observable} An Observable of numbers that emits a finite range of\n     * sequential integers.\n     * @static true\n     * @name range\n     * @owner Observable\n     */\n    RangeObservable.create = function (start, count, scheduler) {\n        if (start === void 0) { start = 0; }\n        if (count === void 0) { count = 0; }\n        return new RangeObservable(start, count, scheduler);\n    };\n    RangeObservable.dispatch = function (state) {\n        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(start);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        state.start = start + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ RangeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var start = this.start;\n        var count = this._count;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(RangeObservable.dispatch, 0, {\n                index: index, count: count, start: start, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(start++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return RangeObservable;\n}(Observable_1.Observable));\nexports.RangeObservable = RangeObservable;\n//# sourceMappingURL=RangeObservable.js.map"]},"metadata":{},"sourceType":"script"}