{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar tryCatch_1 = require('../util/tryCatch');\n\nvar errorObject_1 = require('../util/errorObject');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\n\n\nfunction mergeScan(accumulator, seed, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  return function (source) {\n    return source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n  };\n}\n\nexports.mergeScan = mergeScan;\n\nvar MergeScanOperator = function () {\n  function MergeScanOperator(accumulator, seed, concurrent) {\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.concurrent = concurrent;\n  }\n\n  MergeScanOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n  };\n\n  return MergeScanOperator;\n}();\n\nexports.MergeScanOperator = MergeScanOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar MergeScanSubscriber = function (_super) {\n  __extends(MergeScanSubscriber, _super);\n\n  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n    _super.call(this, destination);\n\n    this.accumulator = accumulator;\n    this.acc = acc;\n    this.concurrent = concurrent;\n    this.hasValue = false;\n    this.hasCompleted = false;\n    this.buffer = [];\n    this.active = 0;\n    this.index = 0;\n  }\n\n  MergeScanSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      var index = this.index++;\n      var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);\n      var destination = this.destination;\n\n      if (ish === errorObject_1.errorObject) {\n        destination.error(errorObject_1.errorObject.e);\n      } else {\n        this.active++;\n\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n    this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n  };\n\n  MergeScanSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n\n      this.destination.complete();\n    }\n  };\n\n  MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var destination = this.destination;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  };\n\n  MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n    var buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n\n      this.destination.complete();\n    }\n  };\n\n  return MergeScanSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n\nexports.MergeScanSubscriber = MergeScanSubscriber; //# sourceMappingURL=mergeScan.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/operators/mergeScan.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","tryCatch_1","require","errorObject_1","subscribeToResult_1","OuterSubscriber_1","mergeScan","accumulator","seed","concurrent","Number","POSITIVE_INFINITY","source","lift","MergeScanOperator","exports","call","subscriber","subscribe","MergeScanSubscriber","_super","destination","acc","hasValue","hasCompleted","buffer","active","index","_next","value","ish","tryCatch","errorObject","error","e","_innerSub","push","add","subscribeToResult","_complete","length","next","complete","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyComplete","remove","shift","OuterSubscriber"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nexports.mergeScan = mergeScan;\nvar MergeScanOperator = (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexports.MergeScanOperator = MergeScanOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = (function (_super) {\n    __extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeScanSubscriber = MergeScanSubscriber;\n//# sourceMappingURL=mergeScan.js.map"]},"metadata":{},"sourceType":"script"}