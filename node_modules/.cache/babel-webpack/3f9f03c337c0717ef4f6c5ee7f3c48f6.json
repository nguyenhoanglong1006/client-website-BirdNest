{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar FromObservable_1 = require('../observable/FromObservable');\n\nvar isArray_1 = require('../util/isArray');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\n\nfunction onErrorResumeNext() {\n  var nextSources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    nextSources[_i - 0] = arguments[_i];\n  }\n\n  if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n    nextSources = nextSources[0];\n  }\n\n  return function (source) {\n    return source.lift(new OnErrorResumeNextOperator(nextSources));\n  };\n}\n\nexports.onErrorResumeNext = onErrorResumeNext;\n/* tslint:enable:max-line-length */\n\nfunction onErrorResumeNextStatic() {\n  var nextSources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    nextSources[_i - 0] = arguments[_i];\n  }\n\n  var source = null;\n\n  if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n    nextSources = nextSources[0];\n  }\n\n  source = nextSources.shift();\n  return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\n\nexports.onErrorResumeNextStatic = onErrorResumeNextStatic;\n\nvar OnErrorResumeNextOperator = function () {\n  function OnErrorResumeNextOperator(nextSources) {\n    this.nextSources = nextSources;\n  }\n\n  OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  };\n\n  return OnErrorResumeNextOperator;\n}();\n\nvar OnErrorResumeNextSubscriber = function (_super) {\n  __extends(OnErrorResumeNextSubscriber, _super);\n\n  function OnErrorResumeNextSubscriber(destination, nextSources) {\n    _super.call(this, destination);\n\n    this.destination = destination;\n    this.nextSources = nextSources;\n  }\n\n  OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n    this.subscribeToNextSource();\n  };\n\n  OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.subscribeToNextSource();\n  };\n\n  OnErrorResumeNextSubscriber.prototype._error = function (err) {\n    this.subscribeToNextSource();\n  };\n\n  OnErrorResumeNextSubscriber.prototype._complete = function () {\n    this.subscribeToNextSource();\n  };\n\n  OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n    var next = this.nextSources.shift();\n\n    if (next) {\n      this.add(subscribeToResult_1.subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  };\n\n  return OnErrorResumeNextSubscriber;\n}(OuterSubscriber_1.OuterSubscriber); //# sourceMappingURL=onErrorResumeNext.js.map","map":{"version":3,"sources":["/Users/nguyenlong/ProjectCompany/2nMart/websiteclient-2nmart.vn/node_modules/ng5-slider/node_modules/rxjs/operators/onErrorResumeNext.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","FromObservable_1","require","isArray_1","OuterSubscriber_1","subscribeToResult_1","onErrorResumeNext","nextSources","_i","arguments","length","isArray","source","lift","OnErrorResumeNextOperator","exports","onErrorResumeNextStatic","shift","FromObservable","call","subscriber","subscribe","OnErrorResumeNextSubscriber","_super","destination","notifyError","error","innerSub","subscribeToNextSource","notifyComplete","_error","err","_complete","next","add","subscribeToResult","complete","OuterSubscriber"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar FromObservable_1 = require('../observable/FromObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n/* tslint:enable:max-line-length */\nfunction onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nexports.onErrorResumeNextStatic = onErrorResumeNextStatic;\nvar OnErrorResumeNextOperator = (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = (function (_super) {\n    __extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult_1.subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=onErrorResumeNext.js.map"]},"metadata":{},"sourceType":"script"}