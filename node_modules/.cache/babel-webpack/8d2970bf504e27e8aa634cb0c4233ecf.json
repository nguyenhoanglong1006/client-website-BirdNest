{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\n\n\nfunction debounce(durationSelector) {\n  return function (source) {\n    return source.lift(new DebounceOperator(durationSelector));\n  };\n}\n\nexports.debounce = debounce;\n\nvar DebounceOperator = function () {\n  function DebounceOperator(durationSelector) {\n    this.durationSelector = durationSelector;\n  }\n\n  DebounceOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  };\n\n  return DebounceOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar DebounceSubscriber = function (_super) {\n  __extends(DebounceSubscriber, _super);\n\n  function DebounceSubscriber(destination, durationSelector) {\n    _super.call(this, destination);\n\n    this.durationSelector = durationSelector;\n    this.hasValue = false;\n    this.durationSubscription = null;\n  }\n\n  DebounceSubscriber.prototype._next = function (value) {\n    try {\n      var result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n\n  DebounceSubscriber.prototype._complete = function () {\n    this.emitValue();\n    this.destination.complete();\n  };\n\n  DebounceSubscriber.prototype._tryNext = function (value, duration) {\n    var subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult_1.subscribeToResult(this, duration);\n\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  };\n\n  DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.emitValue();\n  };\n\n  DebounceSubscriber.prototype.notifyComplete = function () {\n    this.emitValue();\n  };\n\n  DebounceSubscriber.prototype.emitValue = function () {\n    if (this.hasValue) {\n      var value = this.value;\n      var subscription = this.durationSubscription;\n\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n\n      this.value = null;\n      this.hasValue = false;\n\n      _super.prototype._next.call(this, value);\n    }\n  };\n\n  return DebounceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber); //# sourceMappingURL=debounce.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/operators/debounce.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","OuterSubscriber_1","require","subscribeToResult_1","debounce","durationSelector","source","lift","DebounceOperator","exports","call","subscriber","subscribe","DebounceSubscriber","_super","destination","hasValue","durationSubscription","_next","value","result","_tryNext","err","error","_complete","emitValue","complete","duration","subscription","unsubscribe","remove","subscribeToResult","closed","add","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyComplete","OuterSubscriber"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nexports.debounce = debounce;\nvar DebounceOperator = (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = (function (_super) {\n    __extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n        this.durationSubscription = null;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult_1.subscribeToResult(this, duration);\n        if (!subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=debounce.js.map"]},"metadata":{},"sourceType":"script"}