{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subject_1 = require('../Subject');\n\nvar tryCatch_1 = require('../util/tryCatch');\n\nvar errorObject_1 = require('../util/errorObject');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\n\n\nfunction repeatWhen(notifier) {\n  return function (source) {\n    return source.lift(new RepeatWhenOperator(notifier));\n  };\n}\n\nexports.repeatWhen = repeatWhen;\n\nvar RepeatWhenOperator = function () {\n  function RepeatWhenOperator(notifier) {\n    this.notifier = notifier;\n  }\n\n  RepeatWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  };\n\n  return RepeatWhenOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar RepeatWhenSubscriber = function (_super) {\n  __extends(RepeatWhenSubscriber, _super);\n\n  function RepeatWhenSubscriber(destination, notifier, source) {\n    _super.call(this, destination);\n\n    this.notifier = notifier;\n    this.source = source;\n    this.sourceIsBeingSubscribedTo = true;\n  }\n\n  RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  };\n\n  RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return _super.prototype.complete.call(this);\n    }\n  };\n\n  RepeatWhenSubscriber.prototype.complete = function () {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return _super.prototype.complete.call(this);\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.notifications.next();\n    }\n  };\n  /** @deprecated internal use only */\n\n\n  RepeatWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        notifications = _a.notifications,\n        retriesSubscription = _a.retriesSubscription;\n\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n\n    this.retries = null;\n  };\n  /** @deprecated internal use only */\n\n\n  RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n    var _a = this,\n        notifications = _a.notifications,\n        retries = _a.retries,\n        retriesSubscription = _a.retriesSubscription;\n\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    _super.prototype._unsubscribeAndRecycle.call(this);\n\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  };\n\n  RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n    this.notifications = new Subject_1.Subject();\n    var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\n\n    if (retries === errorObject_1.errorObject) {\n      return _super.prototype.complete.call(this);\n    }\n\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n  };\n\n  return RepeatWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber); //# sourceMappingURL=repeatWhen.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/operators/repeatWhen.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subject_1","require","tryCatch_1","errorObject_1","OuterSubscriber_1","subscribeToResult_1","repeatWhen","notifier","source","lift","RepeatWhenOperator","exports","call","subscriber","subscribe","RepeatWhenSubscriber","_super","destination","sourceIsBeingSubscribedTo","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyComplete","complete","isStopped","retries","subscribeToRetries","retriesSubscription","closed","_unsubscribeAndRecycle","notifications","next","_unsubscribe","_a","unsubscribe","Subject","tryCatch","errorObject","subscribeToResult","OuterSubscriber"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nexports.repeatWhen = repeatWhen;\nvar RepeatWhenOperator = (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = (function (_super) {\n    __extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject_1.Subject();\n        var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject_1.errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map"]},"metadata":{},"sourceType":"script"}