{"ast":null,"code":"\"use strict\";\n\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\n\n\nvar Notification = function () {\n  function Notification(kind, value, error) {\n    this.kind = kind;\n    this.value = value;\n    this.error = error;\n    this.hasValue = kind === 'N';\n  }\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n\n\n  Notification.prototype.observe = function (observer) {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n\n      case 'E':\n        return observer.error && observer.error(this.error);\n\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  };\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n\n\n  Notification.prototype.do = function (next, error, complete) {\n    var kind = this.kind;\n\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n\n      case 'E':\n        return error && error(this.error);\n\n      case 'C':\n        return complete && complete();\n    }\n  };\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n\n\n  Notification.prototype.accept = function (nextOrObserver, error, complete) {\n    if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n      return this.observe(nextOrObserver);\n    } else {\n      return this.do(nextOrObserver, error, complete);\n    }\n  };\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n\n\n  Notification.prototype.toObservable = function () {\n    var kind = this.kind;\n\n    switch (kind) {\n      case 'N':\n        return Observable_1.Observable.of(this.value);\n\n      case 'E':\n        return Observable_1.Observable.throw(this.error);\n\n      case 'C':\n        return Observable_1.Observable.empty();\n    }\n\n    throw new Error('unexpected notification kind value');\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n\n\n  Notification.createNext = function (value) {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n\n    return Notification.undefinedValueNotification;\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n\n\n  Notification.createError = function (err) {\n    return new Notification('E', undefined, err);\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n\n\n  Notification.createComplete = function () {\n    return Notification.completeNotification;\n  };\n\n  Notification.completeNotification = new Notification('C');\n  Notification.undefinedValueNotification = new Notification('N', undefined);\n  return Notification;\n}();\n\nexports.Notification = Notification; //# sourceMappingURL=Notification.js.map","map":{"version":3,"sources":["/Users/nguyenlong/ProjectCompany/2nMart/websiteclient-2nmart.vn/node_modules/ng5-slider/node_modules/rxjs/Notification.js"],"names":["Observable_1","require","Notification","kind","value","error","hasValue","prototype","observe","observer","next","complete","do","accept","nextOrObserver","toObservable","Observable","of","throw","empty","Error","createNext","undefinedValueNotification","createError","err","undefined","createComplete","completeNotification","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_1.Observable.of(this.value);\n            case 'E':\n                return Observable_1.Observable.throw(this.error);\n            case 'C':\n                return Observable_1.Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexports.Notification = Notification;\n//# sourceMappingURL=Notification.js.map"]},"metadata":{},"sourceType":"script"}