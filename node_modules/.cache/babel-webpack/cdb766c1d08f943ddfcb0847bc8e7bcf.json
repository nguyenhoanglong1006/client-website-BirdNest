{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\n\n\nfunction skipLast(count) {\n  return function (source) {\n    return source.lift(new SkipLastOperator(count));\n  };\n}\n\nexports.skipLast = skipLast;\n\nvar SkipLastOperator = function () {\n  function SkipLastOperator(_skipCount) {\n    this._skipCount = _skipCount;\n\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();\n    }\n  }\n\n  SkipLastOperator.prototype.call = function (subscriber, source) {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber_1.Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  };\n\n  return SkipLastOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar SkipLastSubscriber = function (_super) {\n  __extends(SkipLastSubscriber, _super);\n\n  function SkipLastSubscriber(destination, _skipCount) {\n    _super.call(this, destination);\n\n    this._skipCount = _skipCount;\n    this._count = 0;\n    this._ring = new Array(_skipCount);\n  }\n\n  SkipLastSubscriber.prototype._next = function (value) {\n    var skipCount = this._skipCount;\n    var count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      var currentIndex = count % skipCount;\n      var ring = this._ring;\n      var oldValue = ring[currentIndex];\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  };\n\n  return SkipLastSubscriber;\n}(Subscriber_1.Subscriber); //# sourceMappingURL=skipLast.js.map","map":{"version":3,"sources":["/Users/nguyenlong/ProjectCompany/2nMart/websiteclient-2nmart.vn/node_modules/ng5-slider/node_modules/rxjs/operators/skipLast.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","ArgumentOutOfRangeError_1","skipLast","count","source","lift","SkipLastOperator","exports","_skipCount","ArgumentOutOfRangeError","call","subscriber","subscribe","Subscriber","SkipLastSubscriber","_super","destination","_count","_ring","Array","_next","value","skipCount","currentIndex","ring","oldValue","next"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nexports.skipLast = skipLast;\nvar SkipLastOperator = (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber_1.Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = (function (_super) {\n    __extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        _super.call(this, destination);\n        this._skipCount = _skipCount;\n        this._count = 0;\n        this._ring = new Array(_skipCount);\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skipLast.js.map"]},"metadata":{},"sourceType":"script"}