{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n\nexports.defaultThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\n\nfunction throttle(durationSelector, config) {\n  if (config === void 0) {\n    config = exports.defaultThrottleConfig;\n  }\n\n  return function (source) {\n    return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n  };\n}\n\nexports.throttle = throttle;\n\nvar ThrottleOperator = function () {\n  function ThrottleOperator(durationSelector, leading, trailing) {\n    this.durationSelector = durationSelector;\n    this.leading = leading;\n    this.trailing = trailing;\n  }\n\n  ThrottleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n  };\n\n  return ThrottleOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar ThrottleSubscriber = function (_super) {\n  __extends(ThrottleSubscriber, _super);\n\n  function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n    _super.call(this, destination);\n\n    this.destination = destination;\n    this.durationSelector = durationSelector;\n    this._leading = _leading;\n    this._trailing = _trailing;\n    this._hasTrailingValue = false;\n  }\n\n  ThrottleSubscriber.prototype._next = function (value) {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      var duration = this.tryDurationSelector(value);\n\n      if (duration) {\n        this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n      }\n\n      if (this._leading) {\n        this.destination.next(value);\n\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  };\n\n  ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  };\n  /** @deprecated internal use only */\n\n\n  ThrottleSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        throttled = _a.throttled,\n        _trailingValue = _a._trailingValue,\n        _hasTrailingValue = _a._hasTrailingValue,\n        _trailing = _a._trailing;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  };\n\n  ThrottleSubscriber.prototype._sendTrailing = function () {\n    var _a = this,\n        destination = _a.destination,\n        throttled = _a.throttled,\n        _trailing = _a._trailing,\n        _trailingValue = _a._trailingValue,\n        _hasTrailingValue = _a._hasTrailingValue;\n\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  };\n\n  ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this._sendTrailing();\n\n    this._unsubscribe();\n  };\n\n  ThrottleSubscriber.prototype.notifyComplete = function () {\n    this._sendTrailing();\n\n    this._unsubscribe();\n  };\n\n  return ThrottleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber); //# sourceMappingURL=throttle.js.map","map":{"version":3,"sources":["/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/ng5-slider/node_modules/rxjs/operators/throttle.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","OuterSubscriber_1","require","subscribeToResult_1","exports","defaultThrottleConfig","leading","trailing","throttle","durationSelector","config","source","lift","ThrottleOperator","call","subscriber","subscribe","ThrottleSubscriber","_super","destination","_leading","_trailing","_hasTrailingValue","_next","value","throttled","_trailingValue","duration","tryDurationSelector","add","subscribeToResult","next","err","error","_unsubscribe","_a","remove","unsubscribe","_sendTrailing","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyComplete","OuterSubscriber"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nexports.defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = exports.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nexports.throttle = throttle;\nvar ThrottleOperator = (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = (function (_super) {\n    __extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasTrailingValue = false;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this._trailing) {\n                this._hasTrailingValue = true;\n                this._trailingValue = value;\n            }\n        }\n        else {\n            var duration = this.tryDurationSelector(value);\n            if (duration) {\n                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n            }\n            if (this._leading) {\n                this.destination.next(value);\n                if (this._trailing) {\n                    this._hasTrailingValue = true;\n                    this._trailingValue = value;\n                }\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    /** @deprecated internal use only */ ThrottleSubscriber.prototype._unsubscribe = function () {\n        var _a = this, throttled = _a.throttled, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue, _trailing = _a._trailing;\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n    };\n    ThrottleSubscriber.prototype._sendTrailing = function () {\n        var _a = this, destination = _a.destination, throttled = _a.throttled, _trailing = _a._trailing, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue;\n        if (throttled && _trailing && _hasTrailingValue) {\n            destination.next(_trailingValue);\n            this._trailingValue = null;\n            this._hasTrailingValue = false;\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=throttle.js.map"]},"metadata":{},"sourceType":"script"}