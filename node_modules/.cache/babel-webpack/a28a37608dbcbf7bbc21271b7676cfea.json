{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\n\n\nfunction mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  return function mergeMapOperatorFunction(source) {\n    if (typeof resultSelector === 'number') {\n      concurrent = resultSelector;\n      resultSelector = null;\n    }\n\n    return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n  };\n}\n\nexports.mergeMap = mergeMap;\n\nvar MergeMapOperator = function () {\n  function MergeMapOperator(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    this.project = project;\n    this.resultSelector = resultSelector;\n    this.concurrent = concurrent;\n  }\n\n  MergeMapOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n  };\n\n  return MergeMapOperator;\n}();\n\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar MergeMapSubscriber = function (_super) {\n  __extends(MergeMapSubscriber, _super);\n\n  function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    _super.call(this, destination);\n\n    this.project = project;\n    this.resultSelector = resultSelector;\n    this.concurrent = concurrent;\n    this.hasCompleted = false;\n    this.buffer = [];\n    this.active = 0;\n    this.index = 0;\n  }\n\n  MergeMapSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  MergeMapSubscriber.prototype._tryNext = function (value) {\n    var result;\n    var index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.active++;\n\n    this._innerSub(result, value, index);\n  };\n\n  MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n    this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n  };\n\n  MergeMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  };\n\n  MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  };\n\n  MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n    var result;\n\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(result);\n  };\n\n  MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n    var buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n\n  return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n\nexports.MergeMapSubscriber = MergeMapSubscriber; //# sourceMappingURL=mergeMap.js.map","map":{"version":3,"sources":["/Users/nguyenlong/ProjectCompany/2nMart/websiteclient-2nmart.vn/node_modules/ng5-slider/node_modules/rxjs/operators/mergeMap.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","subscribeToResult_1","require","OuterSubscriber_1","mergeMap","project","resultSelector","concurrent","Number","POSITIVE_INFINITY","mergeMapOperatorFunction","source","lift","MergeMapOperator","exports","call","observer","subscribe","MergeMapSubscriber","_super","destination","hasCompleted","buffer","active","index","_next","value","_tryNext","push","result","err","error","_innerSub","ish","add","subscribeToResult","_complete","length","complete","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","_notifyResultSelector","next","notifyComplete","remove","shift","OuterSubscriber"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexports.mergeMap = mergeMap;\nvar MergeMapOperator = (function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = (function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapSubscriber = MergeMapSubscriber;\n//# sourceMappingURL=mergeMap.js.map"]},"metadata":{},"sourceType":"script"}